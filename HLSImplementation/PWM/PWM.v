/* Generated by Amaranth Yosys 0.40 (PyPI ver 0.40.0.0.post93, git sha1 a1bb0255d) */

(* top =  1  *)
(* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:19" *)
(* generator = "Amaranth" *)
module PWM(DataIn, \clk$5 , rst, PWMOut, counter, DataInReg, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire [10:0] \$1 ;
  wire \$2 ;
  wire [12:0] \$3 ;
  wire \$4 ;
  reg [9:0] \$5 ;
  reg [11:0] \$6 ;
  reg \$7 ;
  (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:9" *)
  input [11:0] DataIn;
  wire [11:0] DataIn;
  (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:16" *)
  output [11:0] DataInReg;
  reg [11:0] DataInReg = 12'h000;
  (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:12" *)
  output PWMOut;
  reg PWMOut = 1'h0;
  (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:8" *)
  input clk;
  wire clk;
  (* src = "/home/user/.local/lib/python3.10/site-packages/amaranth/hdl/_ir.py:270" *)
  input \clk$5 ;
  wire \clk$5 ;
  (* src = "/home/user/.local/lib/python3.10/site-packages/amaranth/hdl/_ir.py:270" *)
  wire \clk$7 ;
  (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:15" *)
  output [9:0] counter;
  reg [9:0] counter = 10'h000;
  (* src = "/home/user/.local/lib/python3.10/site-packages/amaranth/hdl/_ir.py:270" *)
  input rst;
  wire rst;
  assign \$3  = DataIn + (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:26" *) 10'h200;
  assign \$4  = counter > (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:29" *) DataInReg[9:0];
  (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:15" *)
  always @(posedge \clk$5 )
    counter <= \$5 ;
  (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:16" *)
  always @(posedge \clk$5 )
    DataInReg <= \$6 ;
  (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:12" *)
  always @(posedge \clk$5 )
    PWMOut <= \$7 ;
  assign \$1  = counter + (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:22" *) 1'h1;
  assign \$2  = ! (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:25" *) counter;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$5  = \$1 [9:0];
    if (rst) begin
      \$5  = 10'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$6  = DataInReg;
    if (\$2 ) begin
      \$6  = \$3 [11:0];
    end
    if (rst) begin
      \$6  = 12'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (\$4 ) begin
      \$7  = 1'h0;
    end else begin
      \$7  = 1'h1;
    end
    if (rst) begin
      \$7  = 1'h0;
    end
  end
  assign \clk$7  = \clk$5 ;
endmodule
