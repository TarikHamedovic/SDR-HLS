/* Generated by Yosys 0.42+40 (git sha1 a739e21a5, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os) */

(* top =  1  *)
(* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:46" *)
(* generator = "Amaranth" *)
module top(valid, clk, rst, res, ready, current_count, q, r, r_reg, left, right, a, sqrt_state, num);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire \$1 ;
  wire \$10 ;
  reg [1:0] \$11 ;
  reg [31:0] \$12 ;
  reg [15:0] \$13 ;
  reg [17:0] \$14 ;
  reg [3:0] \$15 ;
  reg [1:0] \$16 ;
  reg \$17 ;
  wire [4:0] \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire [18:0] \$6 ;
  wire [18:0] \$7 ;
  wire \$8 ;
  wire \$9 ;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:36" *)
  output [31:0] a;
  reg [31:0] a = 32'd0;
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input clk;
  wire clk;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:34" *)
  output [3:0] current_count;
  reg [3:0] current_count = 4'h0;
  (* src = "/usr/lib/python3.10/contextlib.py:142" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:38" *)
  output [17:0] left;
  wire [17:0] left;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:25" *)
  input [31:0] num;
  wire [31:0] num;
  (* init = 16'h0000 *)
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:37" *)
  output [15:0] q;
  wire [15:0] q;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:40" *)
  output [17:0] r;
  reg [17:0] r;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:41" *)
  output [17:0] r_reg;
  reg [17:0] r_reg = 18'h00000;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:31" *)
  output ready;
  reg ready = 1'h0;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:37" *)
  output [15:0] res;
  reg [15:0] res = 16'h0000;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:26" *)
  wire reset;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:39" *)
  output [17:0] right;
  wire [17:0] right;
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input rst;
  wire rst;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:35" *)
  output [1:0] sqrt_state;
  reg [1:0] sqrt_state = 2'h0;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:27" *)
  input valid;
  wire valid;
  assign \$2  = current_count + (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:79" *) 1'h1;
  assign \$3  = ~ (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:81" *) r[17];
  assign \$4  = & (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:84" *) current_count;
  assign \$6  = { r_reg[15:0], a[31:30] } + (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:105" *) { res, r_reg[17], 1'h1 };
  assign \$7  = { r_reg[15:0], a[31:30] } - (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:107" *) { res, r_reg[17], 1'h1 };
  assign \$8  = ! (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_dsl.py:490" *) fsm_state;
  assign \$9  = fsm_state == (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_dsl.py:490" *) 1'h1;
  assign \$10  = fsm_state == (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_dsl.py:490" *) 2'h2;
  (* src = "/usr/lib/python3.10/contextlib.py:142" *)
  always @(posedge clk)
    fsm_state <= \$11 ;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:36" *)
  always @(posedge clk)
    a <= \$12 ;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:37" *)
  always @(posedge clk)
    res <= \$13 ;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:41" *)
  always @(posedge clk)
    r_reg <= \$14 ;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:34" *)
  always @(posedge clk)
    current_count <= \$15 ;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:35" *)
  always @(posedge clk)
    sqrt_state <= \$16 ;
  (* src = "/home/user/SDR-HLS/5.NewModules/SquareRoot/sequential/amaranth/sqrt_sequential.py:31" *)
  always @(posedge clk)
    ready <= \$17 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$11  = fsm_state;
    casez (fsm_state)
      2'h0:
          if (\$1 ) begin
            \$11  = 2'h0;
          end else if (valid) begin
            \$11  = 2'h1;
          end
      2'h1:
          if (\$4 ) begin
            \$11  = 2'h1;
          end
      2'h2:
          \$11  = 2'h0;
    endcase
    if (rst) begin
      \$11  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$12  = a;
    casez (fsm_state)
      2'h0:
          if (\$1 ) begin
          end else if (valid) begin
            \$12  = num;
          end
      2'h1:
          \$12  = { a[29:0], 2'h0 };
    endcase
    if (\$5 ) begin
      \$12  = 32'd0;
    end
    if (rst) begin
      \$12  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$13  = res;
    casez (fsm_state)
      2'h0:
          if (\$1 ) begin
          end else if (valid) begin
            \$13  = 16'h0000;
          end
      2'h1:
          \$13  = { res[14:0], \$3  };
    endcase
    if (\$5 ) begin
      \$13  = 16'h0000;
    end
    if (rst) begin
      \$13  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$14  = r_reg;
    casez (fsm_state)
      2'h0:
          if (\$1 ) begin
          end else if (valid) begin
            \$14  = 18'h00000;
          end
      2'h1:
          \$14  = r;
    endcase
    if (\$5 ) begin
      \$14  = 18'h00000;
    end
    if (rst) begin
      \$14  = 18'h00000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$15  = current_count;
    casez (fsm_state)
      2'h0:
          if (\$1 ) begin
          end else if (valid) begin
            \$15  = 4'h0;
          end
      2'h1:
          \$15  = \$2 [3:0];
    endcase
    if (\$5 ) begin
      \$15  = 4'h0;
    end
    if (rst) begin
      \$15  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$16  = sqrt_state;
    casez (fsm_state)
      2'h0:
          if (\$1 ) begin
          end else if (valid) begin
            \$16  = 2'h1;
          end
      2'h1:
          if (\$4 ) begin
            \$16  = 2'h2;
          end
      2'h2:
          \$16  = 2'h0;
    endcase
    if (rst) begin
      \$16  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$17  = ready;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          if (\$4 ) begin
            \$17  = 1'h1;
          end
      2'h2:
          \$17  = 1'h0;
    endcase
    if (rst) begin
      \$17  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (r_reg[17]) begin
      r = \$6 [17:0];
    end else begin
      r = \$7 [17:0];
    end
  end
  assign reset = 1'h0;
  assign q = res;
  assign left = { r_reg[15:0], a[31:30] };
  assign right = { res, r_reg[17], 1'h1 };
  assign \$1  = 1'h1;
  assign \$5  = 1'h1;
endmodule
