$date
	Fri Aug 16 19:20:39 2024
$end
$version
	Icarus Verilog
$end
$timescale
	10fs
$end
$scope module top $end
$var wire 1 ! clk_25mhz $end
$var wire 1 " pwm_out_n1 $end
$var wire 1 # pwm_out_n2 $end
$var wire 1 $ pwm_out_n3 $end
$var wire 1 % pwm_out_n4 $end
$var wire 1 & pwm_out_p1 $end
$var wire 1 ' pwm_out_p2 $end
$var wire 1 ( pwm_out_p3 $end
$var wire 1 ) pwm_out_p4 $end
$var wire 1 * rf_in $end
$var wire 1 + rx_serial $end
$var wire 1 , rx_data_valid1 $end
$var wire 8 - rx_byte1 [7:0] $end
$var wire 1 . pwm_out $end
$var wire 12 / mix_sinewave [11:0] $end
$var wire 12 0 mix_cosinewave [11:0] $end
$var wire 13 1 lo_sinewave [12:0] $end
$var wire 13 2 lo_cosinewave [12:0] $end
$var wire 8 3 led [7:0] $end
$var wire 1 4 diff_out $end
$var wire 1 5 clk_80mhz $end
$var wire 12 6 cic_sine_out [11:0] $end
$var wire 1 7 cic_sine_clk $end
$var wire 12 8 cic_cosine_out [11:0] $end
$var wire 1 9 cic_cosine_clk $end
$var wire 12 : amdemod_out [11:0] $end
$var parameter 32 ; CIC_DECIMATION_RATIO $end
$var parameter 32 < CIC_GAIN_WIDTH $end
$var parameter 32 = CIC_REGISTER_WIDTH $end
$var parameter 32 > DATA_WIDTH $end
$var parameter 32 ? LUT_WIDTH $end
$var parameter 32 @ PHASE_WIDTH $end
$var parameter 32 A PWM_COUNTER_WIDTH $end
$var parameter 32 B PWM_OFFSET $end
$var reg 8 C cic_gain [7:0] $end
$var reg 64 D phase_inc_gen [63:0] $end
$var reg 64 E phase_inc_gen1 [63:0] $end
$var reg 8 F rx_byte [7:0] $end
$var reg 1 G rx_data_valid $end
$scope module AMDemodulator_inst $end
$var wire 12 H quadrature [11:0] $end
$var wire 12 I inphase [11:0] $end
$var wire 1 7 clk $end
$var parameter 32 J INPUT_WIDTH $end
$var parameter 64 K N $end
$var reg 13 L amdemod_d [12:0] $end
$var reg 12 M amdemod_out [11:0] $end
$var reg 12 N mult_i_a [11:0] $end
$var reg 12 O mult_i_b [11:0] $end
$var reg 13 P mult_q_a [12:0] $end
$var reg 13 Q mult_q_b [12:0] $end
$var reg 24 R mult_result_i [23:0] $end
$var reg 24 S mult_result_q [23:0] $end
$var reg 26 T square_sum [25:0] $end
$scope function sqrt $end
$upscope $end
$upscope $end
$scope module PLL_inst $end
$var wire 1 ! CLKI $end
$var wire 1 5 CLKOP $end
$var wire 1 U scuba_vlo $end
$var wire 1 V scuba_vhi $end
$var wire 1 W REFCLK $end
$var wire 1 X LOCK $end
$var wire 1 Y CLKOP_t $end
$scope module PLLInst_0 $end
$var wire 1 ! CLKI $end
$var wire 1 Z CLKIB $end
$var wire 1 [ FBB $end
$var wire 1 \ GND $end
$var wire 1 ] PHASEDIRB $end
$var wire 1 W REFCLK $end
$var wire 1 ^ RSTB $end
$var wire 1 _ VCC $end
$var wire 1 U STDBY $end
$var wire 1 U RST $end
$var wire 1 U PLLWAKESYNC $end
$var wire 1 U PHASESTEP $end
$var wire 2 ` PHASESELB [1:0] $end
$var wire 1 U PHASESEL1 $end
$var wire 1 U PHASESEL0 $end
$var wire 1 U PHASELOADREG $end
$var wire 1 U PHASEDIR $end
$var wire 1 X LOCK $end
$var wire 1 a INTLOCK $end
$var wire 1 U ENCLKOS3 $end
$var wire 1 U ENCLKOS2 $end
$var wire 1 U ENCLKOS $end
$var wire 1 U ENCLKOP $end
$var wire 1 b CLKOS3 $end
$var wire 1 c CLKOS2 $end
$var wire 1 d CLKOS $end
$var wire 1 Y CLKOP $end
$var wire 1 e CLKINTFB $end
$var wire 1 Y CLKFB $end
$var parameter 32 f CLKFB_DIV $end
$var parameter 32 g CLKI_DIV $end
$var parameter 32 h CLKOP_CPHASE $end
$var parameter 32 i CLKOP_DIV $end
$var parameter 56 j CLKOP_ENABLE $end
$var parameter 32 k CLKOP_FPHASE $end
$var parameter 32 l CLKOP_TRIM_DELAY $end
$var parameter 56 m CLKOP_TRIM_POL $end
$var parameter 32 n CLKOS2_CPHASE $end
$var parameter 32 o CLKOS2_DIV $end
$var parameter 64 p CLKOS2_ENABLE $end
$var parameter 32 q CLKOS2_FPHASE $end
$var parameter 32 r CLKOS3_CPHASE $end
$var parameter 32 s CLKOS3_DIV $end
$var parameter 64 t CLKOS3_ENABLE $end
$var parameter 32 u CLKOS3_FPHASE $end
$var parameter 32 v CLKOS_CPHASE $end
$var parameter 32 w CLKOS_DIV $end
$var parameter 64 x CLKOS_ENABLE $end
$var parameter 32 y CLKOS_FPHASE $end
$var parameter 32 z CLKOS_TRIM_DELAY $end
$var parameter 56 { CLKOS_TRIM_POL $end
$var parameter 64 | DPHASE_SOURCE $end
$var parameter 40 } FEEDBK_PATH $end
$var parameter 64 ~ FIN $end
$var parameter 64 !" INTFB_WAKE $end
$var parameter 56 "" INT_LOCK_STICKY $end
$var parameter 32 #" OUTDIVIDER_MUXA $end
$var parameter 32 $" OUTDIVIDER_MUXB $end
$var parameter 32 %" OUTDIVIDER_MUXC $end
$var parameter 32 &" OUTDIVIDER_MUXD $end
$var parameter 64 '" PLLRST_ENA $end
$var parameter 32 (" PLL_LOCK_DELAY $end
$var parameter 32 )" PLL_LOCK_MODE $end
$var parameter 64 *" REFIN_RESET $end
$var parameter 64 +" STDBY_ENABLE $end
$var parameter 64 ," SYNC_ENABLE $end
$var reg 2 -" mc1_clkmux_fb [1:0] $end
$var reg 4 ." mc1_clkop_trim [3:0] $end
$var reg 4 /" mc1_clkos_trim [3:0] $end
$var reg 7 0" mc1_dela [6:0] $end
$var reg 7 1" mc1_delb [6:0] $end
$var reg 7 2" mc1_delc [6:0] $end
$var reg 7 3" mc1_deld [6:0] $end
$var reg 7 4" mc1_diva [6:0] $end
$var reg 7 5" mc1_divb [6:0] $end
$var reg 7 6" mc1_divc [6:0] $end
$var reg 7 7" mc1_divd [6:0] $end
$var reg 7 8" mc1_divfbk [6:0] $end
$var reg 7 9" mc1_divref [6:0] $end
$var reg 2 :" mc1_dprog [1:0] $end
$var reg 1 ;" mc1_dyn_source $end
$var reg 1 <" mc1_en_filteropamp $end
$var reg 1 =" mc1_en_up $end
$var reg 4 >" mc1_enable_clk [3:0] $end
$var reg 1 ?" mc1_enable_sync $end
$var reg 1 @" mc1_float_icp $end
$var reg 1 A" mc1_force_vfilter $end
$var reg 1 B" mc1_gmc_preset $end
$var reg 1 C" mc1_gmc_reset $end
$var reg 2 D" mc1_gmcref_sel [1:0] $end
$var reg 4 E" mc1_gmcsel [3:0] $end
$var reg 3 F" mc1_gprog [2:0] $end
$var reg 1 G" mc1_int_lock_sticky $end
$var reg 1 H" mc1_intfb $end
$var reg 5 I" mc1_iprog [4:0] $end
$var reg 3 J" mc1_kprog [2:0] $end
$var reg 1 K" mc1_lf_preset $end
$var reg 1 L" mc1_lf_reset $end
$var reg 1 M" mc1_lf_resgrnd $end
$var reg 2 N" mc1_lock [1:0] $end
$var reg 3 O" mc1_lock_sel [2:0] $end
$var reg 3 P" mc1_mfgout1_sel [2:0] $end
$var reg 3 Q" mc1_mfgout2_sel [2:0] $end
$var reg 3 R" mc1_phia [2:0] $end
$var reg 3 S" mc1_phib [2:0] $end
$var reg 3 T" mc1_phic [2:0] $end
$var reg 3 U" mc1_phid [2:0] $end
$var reg 1 V" mc1_pllpdn $end
$var reg 1 W" mc1_pllrst_ena $end
$var reg 1 X" mc1_refin_reset $end
$var reg 16 Y" mc1_reserved [15:0] $end
$var reg 7 Z" mc1_rprog [6:0] $end
$var reg 4 [" mc1_sel_fbk [3:0] $end
$var reg 1 \" mc1_sel_outa $end
$var reg 1 ]" mc1_sel_outb $end
$var reg 1 ^" mc1_sel_outc $end
$var reg 1 _" mc1_sel_outd $end
$var reg 3 `" mc1_sel_ref1 [2:0] $end
$var reg 3 a" mc1_sel_ref2 [2:0] $end
$var reg 1 b" mc1_stdby $end
$var reg 1 c" mc1_stdby_analogon $end
$var reg 1 d" mc1_test_icp $end
$var reg 1 e" mc1_trimop_bypass_n $end
$var reg 1 f" mc1_trimos_bypass_n $end
$var reg 1 g" mc1_vco_noreset $end
$scope module PLL_INST $end
$var wire 1 ] cib_direction $end
$var wire 2 h" cib_dyn_sel [1:0] $end
$var wire 2 i" cib_input [1:0] $end
$var wire 1 j" clkfb $end
$var wire 1 k" clki $end
$var wire 1 l" clkib $end
$var wire 1 e clkintfb $end
$var wire 1 Y clkop $end
$var wire 1 d clkos $end
$var wire 1 c clkos2 $end
$var wire 1 b clkos3 $end
$var wire 1 m" done_cfg $end
$var wire 1 n" done_cfg_n $end
$var wire 1 o" extcon $end
$var wire 1 p" fbb $end
$var wire 11 q" fbkclk [10:0] $end
$var wire 1 r" fbkclkmux_div $end
$var wire 1 a int_lock $end
$var wire 2 s" iref_10upwr [1:0] $end
$var wire 1 t" loadregb $end
$var wire 1 X lock $end
$var wire 2 u" mc1_clkmux_fb [1:0] $end
$var wire 4 v" mc1_clkop_trim [3:0] $end
$var wire 4 w" mc1_clkos_trim [3:0] $end
$var wire 7 x" mc1_dela [6:0] $end
$var wire 7 y" mc1_delb [6:0] $end
$var wire 7 z" mc1_delc [6:0] $end
$var wire 7 {" mc1_deld [6:0] $end
$var wire 7 |" mc1_diva [6:0] $end
$var wire 7 }" mc1_divb [6:0] $end
$var wire 7 ~" mc1_divc [6:0] $end
$var wire 7 !# mc1_divd [6:0] $end
$var wire 7 "# mc1_divfbk [6:0] $end
$var wire 7 ## mc1_divref [6:0] $end
$var wire 2 $# mc1_dprog [1:0] $end
$var wire 1 ;" mc1_dyn_source $end
$var wire 1 <" mc1_en_filteropamp $end
$var wire 1 =" mc1_en_up $end
$var wire 4 %# mc1_enable_clk [3:0] $end
$var wire 1 ?" mc1_enable_sync $end
$var wire 1 @" mc1_float_icp $end
$var wire 1 A" mc1_force_vfilter $end
$var wire 1 B" mc1_gmc_preset $end
$var wire 1 C" mc1_gmc_reset $end
$var wire 2 &# mc1_gmcref_sel [1:0] $end
$var wire 4 '# mc1_gmcsel [3:0] $end
$var wire 3 (# mc1_gprog [2:0] $end
$var wire 1 G" mc1_int_lock_sticky $end
$var wire 1 H" mc1_intfb $end
$var wire 5 )# mc1_iprog [4:0] $end
$var wire 3 *# mc1_kprog [2:0] $end
$var wire 1 K" mc1_lf_preset $end
$var wire 1 L" mc1_lf_reset $end
$var wire 1 M" mc1_lf_resgrnd $end
$var wire 2 +# mc1_lock [1:0] $end
$var wire 3 ,# mc1_lock_sel [2:0] $end
$var wire 3 -# mc1_mfgout1_sel [2:0] $end
$var wire 3 .# mc1_mfgout2_sel [2:0] $end
$var wire 1 /# mc1_no_pllreset $end
$var wire 3 0# mc1_phia [2:0] $end
$var wire 3 1# mc1_phib [2:0] $end
$var wire 3 2# mc1_phic [2:0] $end
$var wire 3 3# mc1_phid [2:0] $end
$var wire 1 V" mc1_pllpdn $end
$var wire 1 W" mc1_pllrst_ena $end
$var wire 1 X" mc1_refin_reset $end
$var wire 16 4# mc1_reserved [15:0] $end
$var wire 7 5# mc1_rprog [6:0] $end
$var wire 4 6# mc1_sel_fbk [3:0] $end
$var wire 1 \" mc1_sel_outa $end
$var wire 1 ]" mc1_sel_outb $end
$var wire 1 ^" mc1_sel_outc $end
$var wire 1 _" mc1_sel_outd $end
$var wire 3 7# mc1_sel_ref1 [2:0] $end
$var wire 3 8# mc1_sel_ref2 [2:0] $end
$var wire 1 b" mc1_stdby $end
$var wire 1 c" mc1_stdby_analogon $end
$var wire 1 d" mc1_test_icp $end
$var wire 1 e" mc1_trimop_bypass_n $end
$var wire 1 f" mc1_trimos_bypass_n $end
$var wire 1 g" mc1_vco_noreset $end
$var wire 1 9# pfd_dn $end
$var wire 1 :# pfd_up $end
$var wire 1 ;# phasedirb $end
$var wire 1 <# phasesrcstat $end
$var wire 1 =# phasestepb $end
$var wire 1 ># pll_mfgout1 $end
$var wire 1 ?# pll_mfgout2 $end
$var wire 1 ^ pllreset $end
$var wire 1 @# refclk $end
$var wire 8 A# refclk1 [7:0] $end
$var wire 8 B# refclk2 [7:0] $end
$var wire 1 C# refclkmux_div $end
$var wire 1 D# refin_sel $end
$var wire 1 E# refmuxclk $end
$var wire 1 F# rstb $end
$var wire 1 G# rstb_new $end
$var wire 1 H# rstb_old $end
$var wire 1 I# stdby_internal $end
$var wire 1 J# vccdpll $end
$var wire 1 _ vccpll $end
$var wire 1 K# vssdpll $end
$var wire 1 \ vsspll $end
$var wire 1 U stdby $end
$var wire 1 U pll_wakeup_sync $end
$var wire 2 L# phaseselb [1:0] $end
$var wire 4 M# mc1_sel_out_abcd [3:0] $end
$var wire 1 U enclkos3 $end
$var wire 1 U enclkos2 $end
$var wire 1 U enclkos $end
$var wire 1 U enclkop $end
$var wire 1 N# clkintfb_b $end
$var wire 1 U cib_rotate $end
$var wire 1 U cib_load_reg $end
$var parameter 40 O# FEEDBK_PATH $end
$var parameter 32 P# pll_lock_delay $end
$var reg 1 Q# a0_out $end
$var reg 1 R# a1_out $end
$var reg 1 S# a2_out $end
$var reg 1 T# b0_out $end
$var reg 1 U# b1_out $end
$var reg 1 V# b2_out $end
$var reg 1 W# c0_out $end
$var reg 1 X# c1_out $end
$var reg 1 Y# c2_out $end
$var reg 1 Z# clkop_first_time $end
$var reg 1 [# clkop_out $end
$var reg 1 \# clkop_sync $end
$var reg 1 ]# clkopreg $end
$var reg 1 ^# clkopreg1 $end
$var reg 1 _# clkos2_out $end
$var reg 1 `# clkos2reg $end
$var reg 1 a# clkos2reg1 $end
$var reg 1 b# clkos3_out $end
$var reg 1 c# clkos3reg $end
$var reg 1 d# clkos3reg1 $end
$var reg 1 e# clkos_out $end
$var reg 1 f# clkosreg $end
$var reg 1 g# clkosreg1 $end
$var reg 1 h# clock_invalid $end
$var reg 1 i# clock_valid $end
$var reg 1 j# d0_out $end
$var reg 1 k# d1_lock $end
$var reg 1 l# d1_out $end
$var reg 1 m# d2_lock $end
$var reg 1 n# d2_out $end
$var reg 1 o# d3_lock $end
$var reg 1 p# d4_lock $end
$var reg 1 q# d_lock $end
$var reg 1 r# delay_lockreg1 $end
$var reg 1 s# diva_out $end
$var reg 1 t# diva_out_del $end
$var reg 1 u# diva_out_del1 $end
$var reg 1 v# diva_out_del1_last $end
$var reg 1 w# diva_out_del2 $end
$var reg 1 x# divb_out $end
$var reg 1 y# divb_out_del $end
$var reg 1 z# divb_out_del1 $end
$var reg 1 {# divb_out_del1_last $end
$var reg 1 |# divb_out_del2 $end
$var reg 1 }# divc_out $end
$var reg 1 ~# divc_out_del $end
$var reg 1 !$ divc_out_del1 $end
$var reg 1 "$ divc_out_del1_last $end
$var reg 1 #$ divc_out_del2 $end
$var reg 1 $$ divd_out $end
$var reg 1 %$ divd_out_del $end
$var reg 1 &$ divd_out_del1 $end
$var reg 1 '$ divd_out_del1_last $end
$var reg 1 ($ divd_out_del2 $end
$var reg 1 )$ dphsrcb $end
$var reg 1 N# false_clk $end
$var reg 1 *$ false_clk_first_time $end
$var reg 1 +$ fb_first_time $end
$var reg 1 ,$ fb_nature $end
$var reg 1 -$ fbkclkmux $end
$var reg 1 .$ fbkclkmux_ctrl $end
$var reg 1 /$ fbkclkmux_out $end
$var reg 1 0$ final_sclk $end
$var reg 1 1$ first_time7 $end
$var reg 1 2$ first_time_a $end
$var reg 1 3$ first_time_b $end
$var reg 1 4$ first_time_c $end
$var reg 1 5$ first_time_d $end
$var reg 1 6$ first_time_fbk $end
$var reg 1 7$ first_time_fbkclkmux $end
$var reg 1 8$ first_time_refclkmux $end
$var reg 1 9$ intfb_out $end
$var reg 1 :$ intlockreg $end
$var reg 1 ;$ last_load_reg_en_op $end
$var reg 1 <$ last_load_reg_en_os $end
$var reg 1 =$ last_load_reg_en_os2 $end
$var reg 1 >$ last_load_reg_en_os3 $end
$var reg 1 ?$ last_phase_step $end
$var reg 1 @$ load_reg_en $end
$var reg 1 A$ load_reg_en_op $end
$var reg 1 B$ load_reg_en_op1 $end
$var reg 1 C$ load_reg_en_op2 $end
$var reg 1 D$ load_reg_en_os $end
$var reg 1 E$ load_reg_en_os2 $end
$var reg 1 F$ load_reg_en_os2_1 $end
$var reg 1 G$ load_reg_en_os2_2 $end
$var reg 1 H$ load_reg_en_os3 $end
$var reg 1 I$ load_reg_en_os3_1 $end
$var reg 1 J$ load_reg_en_os3_2 $end
$var reg 1 K$ load_reg_en_os_1 $end
$var reg 1 L$ load_reg_en_os_2 $end
$var reg 1 M$ lock_all $end
$var reg 1 N$ lockreg $end
$var reg 1 O$ lockreg1 $end
$var reg 1 P$ lockreg2 $end
$var reg 1 Q$ lockreg3 $end
$var reg 1 R$ out_clk_valid $end
$var reg 1 S$ pfd_dn_reg $end
$var reg 1 T$ pfd_holding_dn $end
$var reg 1 U$ pfd_holding_up $end
$var reg 1 V$ pfd_up_reg $end
$var reg 1 W$ pfdfbk_reg $end
$var reg 1 X$ pfdref_reg $end
$var reg 1 Y$ pha $end
$var reg 1 Z$ phase_dir $end
$var reg 2 [$ phase_sel [1:0] $end
$var reg 1 \$ phase_step $end
$var reg 1 ]$ phb $end
$var reg 1 ^$ phc $end
$var reg 1 _$ phd $end
$var reg 2 `$ pll_fb_info [1:0] $end
$var reg 4 a$ pll_fb_info_reg [3:0] $end
$var reg 1 b$ pll_mfgout1_reg $end
$var reg 1 c$ pll_mfgout2_reg $end
$var reg 1 d$ refclkmux $end
$var reg 1 e$ refclkmux1 $end
$var reg 1 f$ refclkmux2 $end
$var reg 1 g$ refclkmux_ctrl $end
$var reg 1 h$ refclkmux_out $end
$var reg 1 i$ stdby_state $end
$var reg 1 j$ vco_clk $end
$var reg 1 k$ vco_clk_a $end
$var reg 1 l$ vco_clk_b $end
$var reg 1 m$ vir_intfb $end
$var reg 1 n$ vir_k2clk $end
$var reg 1 o$ vir_kclk $end
$var reg 1 p$ vir_kclk_p $end
$var reg 1 q$ vir_kclk_s $end
$var reg 1 r$ vir_lock $end
$var reg 1 s$ vir_pclk $end
$var reg 1 t$ vir_sclk $end
$var integer 32 u$ clkfb_div_reg [31:0] $end
$var integer 32 v$ clki_div_reg [31:0] $end
$var integer 32 w$ clkop_cphase_dyn [31:0] $end
$var integer 32 x$ clkop_div_reg [31:0] $end
$var integer 32 y$ clkop_fphase_dyn [31:0] $end
$var integer 32 z$ clkos2_cphase_dyn [31:0] $end
$var integer 32 {$ clkos2_div_reg [31:0] $end
$var integer 32 |$ clkos2_fphase_dyn [31:0] $end
$var integer 32 }$ clkos3_cphase_dyn [31:0] $end
$var integer 32 ~$ clkos3_div_reg [31:0] $end
$var integer 32 !% clkos3_fphase_dyn [31:0] $end
$var integer 32 "% clkos_cphase_dyn [31:0] $end
$var integer 32 #% clkos_div_reg [31:0] $end
$var integer 32 $% clkos_fphase_dyn [31:0] $end
$var real 1 %% diva_ph_del $end
$var real 1 &% divb_ph_del $end
$var real 1 '% divc_ph_del $end
$var real 1 (% divd_ph_del $end
$var integer 32 )% fb_count [31:0] $end
$var real 1 *% first_fb_edge $end
$var real 1 +% first_int_edge $end
$var real 1 ,% ha_clk_a $end
$var real 1 -% ha_clk_a_trim $end
$var real 1 .% ha_clk_b $end
$var real 1 /% ha_clk_b_trim $end
$var real 1 0% ha_vco1 $end
$var real 1 1% ha_vco_sim $end
$var integer 32 2% ha_vco_xprec [31:0] $end
$var real 1 3% index $end
$var integer 32 4% index_diva [31:0] $end
$var integer 32 5% index_divb [31:0] $end
$var integer 32 6% index_divc [31:0] $end
$var integer 32 7% index_divd [31:0] $end
$var integer 32 8% index_fbkclkmux [31:0] $end
$var integer 32 9% index_refclkmux [31:0] $end
$var real 1 :% last_clock_edge $end
$var integer 32 ;% load_cnt_op [31:0] $end
$var integer 32 <% load_cnt_os [31:0] $end
$var integer 32 =% load_cnt_os2 [31:0] $end
$var integer 32 >% load_cnt_os3 [31:0] $end
$var real 1 ?% lock_delay_reg $end
$var real 1 @% net_divide $end
$var real 1 A% net_divide1 $end
$var real 1 B% next_clock_edge $end
$var real 1 C% op_ph_del $end
$var real 1 D% os2_ph_del $end
$var real 1 E% os3_ph_del $end
$var real 1 F% os_ph_del $end
$var integer 32 G% ratio1 [31:0] $end
$var real 1 H% real_delay1 $end
$var real 1 I% round_err $end
$var integer 32 J% step_op [31:0] $end
$var integer 32 K% step_op1 [31:0] $end
$var integer 32 L% step_op2 [31:0] $end
$var integer 32 M% step_os [31:0] $end
$var integer 32 N% step_os2 [31:0] $end
$var integer 32 O% step_os2_1 [31:0] $end
$var integer 32 P% step_os2_2 [31:0] $end
$var integer 32 Q% step_os3 [31:0] $end
$var integer 32 R% step_os3_1 [31:0] $end
$var integer 32 S% step_os3_2 [31:0] $end
$var integer 32 T% step_os_1 [31:0] $end
$var integer 32 U% step_os_2 [31:0] $end
$var integer 32 V% step_p [31:0] $end
$var integer 32 W% step_s [31:0] $end
$var integer 32 X% step_s2 [31:0] $end
$var integer 32 Y% step_s3 [31:0] $end
$var real 1 Z% t_diva_clk $end
$var real 1 [% t_divb_clk $end
$var real 1 \% t_divc_clk $end
$var real 1 ]% t_divd_clk $end
$var real 1 ^% t_in_clk $end
$var real 1 _% t_in_clk1 $end
$var real 1 `% t_in_clk2 $end
$var real 1 a% t_in_clk3 $end
$var real 1 b% t_vco $end
$var real 1 c% total_fb_delay $end
$var real 1 d% vco_ph_del_a $end
$var real 1 e% vco_ph_del_b $end
$var real 1 f% vco_ph_del_c $end
$var real 1 g% vco_ph_del_d $end
$var real 1 h% virtual_delay1 $end
$var integer 32 i% wait_pfdfbk [31:0] $end
$var integer 32 j% wait_pfdref [31:0] $end
$upscope $end
$upscope $end
$scope module scuba_vhi_inst $end
$var wire 1 k% VSS $end
$var wire 1 V Z $end
$upscope $end
$scope module scuba_vlo_inst $end
$var wire 1 l% VSS $end
$var wire 1 U Z $end
$upscope $end
$upscope $end
$scope module cic_cosine_inst $end
$var wire 1 5 clk $end
$var wire 8 m% gain [7:0] $end
$var wire 12 n% data_in [11:0] $end
$var parameter 32 o% COUNT_WIDTH $end
$var parameter 32 p% DECIMATION_RATIO $end
$var parameter 32 q% GAIN_WIDTH $end
$var parameter 32 r% INPUT_WIDTH $end
$var parameter 32 s% REGISTER_WIDTH $end
$var reg 72 t% comb10 [71:0] $end
$var reg 72 u% comb6 [71:0] $end
$var reg 72 v% comb7 [71:0] $end
$var reg 72 w% comb8 [71:0] $end
$var reg 72 x% comb9 [71:0] $end
$var reg 72 y% comb_d6 [71:0] $end
$var reg 72 z% comb_d7 [71:0] $end
$var reg 72 {% comb_d8 [71:0] $end
$var reg 72 |% comb_d9 [71:0] $end
$var reg 12 }% count [11:0] $end
$var reg 1 9 data_clk $end
$var reg 12 ~% data_out [11:0] $end
$var reg 1 !& decimation_clk $end
$var reg 72 "& integrator1 [71:0] $end
$var reg 72 #& integrator2 [71:0] $end
$var reg 72 $& integrator3 [71:0] $end
$var reg 72 %& integrator4 [71:0] $end
$var reg 72 && integrator5 [71:0] $end
$var reg 72 '& integrator_d_tmp [71:0] $end
$var reg 72 (& integrator_tmp [71:0] $end
$var reg 72 )& scaled_output [71:0] $end
$var reg 1 *& valid_comb $end
$upscope $end
$scope module cic_sine_inst $end
$var wire 1 5 clk $end
$var wire 8 +& gain [7:0] $end
$var wire 12 ,& data_in [11:0] $end
$var parameter 32 -& COUNT_WIDTH $end
$var parameter 32 .& DECIMATION_RATIO $end
$var parameter 32 /& GAIN_WIDTH $end
$var parameter 32 0& INPUT_WIDTH $end
$var parameter 32 1& REGISTER_WIDTH $end
$var reg 72 2& comb10 [71:0] $end
$var reg 72 3& comb6 [71:0] $end
$var reg 72 4& comb7 [71:0] $end
$var reg 72 5& comb8 [71:0] $end
$var reg 72 6& comb9 [71:0] $end
$var reg 72 7& comb_d6 [71:0] $end
$var reg 72 8& comb_d7 [71:0] $end
$var reg 72 9& comb_d8 [71:0] $end
$var reg 72 :& comb_d9 [71:0] $end
$var reg 12 ;& count [11:0] $end
$var reg 1 7 data_clk $end
$var reg 12 <& data_out [11:0] $end
$var reg 1 =& decimation_clk $end
$var reg 72 >& integrator1 [71:0] $end
$var reg 72 ?& integrator2 [71:0] $end
$var reg 72 @& integrator3 [71:0] $end
$var reg 72 A& integrator4 [71:0] $end
$var reg 72 B& integrator5 [71:0] $end
$var reg 72 C& integrator_d_tmp [71:0] $end
$var reg 72 D& integrator_tmp [71:0] $end
$var reg 72 E& scaled_output [71:0] $end
$var reg 1 F& valid_comb $end
$upscope $end
$scope module mixer_inst $end
$var wire 1 5 clk $end
$var wire 12 G& cosinewave_in [11:0] $end
$var wire 1 * rf_in $end
$var wire 1 4 rf_out $end
$var wire 12 H& sinewave_in [11:0] $end
$var parameter 32 I& INPUT_WIDTH $end
$var reg 12 J& cosinewave_out [11:0] $end
$var reg 1 K& rf_in_delayed_1 $end
$var reg 1 L& rf_in_delayed_2 $end
$var reg 12 M& sinewave_out [11:0] $end
$upscope $end
$scope module nco_inst $end
$var wire 1 N& arst $end
$var wire 1 5 clk $end
$var wire 64 O& phase_increment [63:0] $end
$var wire 1 P& sample_clk_ce $end
$var wire 12 Q& sinewave [11:0] $end
$var wire 12 R& cosinewave [11:0] $end
$var parameter 32 S& LUT_WIDTH $end
$var parameter 32 T& PHASE_WIDTH $end
$var parameter 32 U& SINE_WIDTH $end
$var reg 64 V& phase_accumulator [63:0] $end
$scope module cosinewave_inst $end
$var wire 8 W& address [7:0] $end
$var wire 12 X& value [11:0] $end
$var parameter 32 Y& LUT_WIDTH $end
$var parameter 32 Z& SINE_WIDTH $end
$upscope $end
$scope module sinewave_inst $end
$var wire 8 [& address [7:0] $end
$var wire 12 \& value [11:0] $end
$var parameter 32 ]& LUT_WIDTH $end
$var parameter 32 ^& SINE_WIDTH $end
$upscope $end
$upscope $end
$scope module pwm_inst $end
$var wire 1 5 clk $end
$var wire 12 _& data_in [11:0] $end
$var parameter 32 `& COUNTER_WIDTH $end
$var parameter 32 a& INPUT_WIDTH $end
$var parameter 32 b& OFFSET $end
$var reg 10 c& count [9:0] $end
$var reg 12 d& data_in_reg [11:0] $end
$var reg 1 . pwm_out $end
$upscope $end
$scope module uart_rx_inst $end
$var wire 1 + i_Rx_Serial $end
$var wire 1 5 osc_clk $end
$var parameter 32 e& CLKS_PER_BIT $end
$var parameter 3 f& s_CLEANUP $end
$var parameter 3 g& s_IDLE $end
$var parameter 3 h& s_RX_DATA_BITS $end
$var parameter 3 i& s_RX_START_BIT $end
$var parameter 3 j& s_RX_STOP_BIT $end
$var reg 8 k& UartClk [7:0] $end
$var reg 8 l& o_Rx_Byte [7:0] $end
$var reg 1 , o_Rx_DV $end
$var reg 3 m& r_Bit_Index [2:0] $end
$var reg 16 n& r_Clock_Count [15:0] $end
$var reg 8 o& r_Rx_Byte [7:0] $end
$var reg 1 p& r_Rx_DV $end
$var reg 1 q& r_Rx_DV_last $end
$var reg 1 r& r_Rx_Data $end
$var reg 1 s& r_Rx_Data_R $end
$var reg 3 t& r_SM_Main [2:0] $end
$upscope $end
$upscope $end
$scope module top $end
$scope module AMDemodulator_inst $end
$scope function sqrt $end
$upscope $end
$upscope $end
$scope module PLL_inst $end
$scope module PLLInst_0 $end
$scope module PLL_INST $end
$upscope $end
$upscope $end
$scope module scuba_vhi_inst $end
$upscope $end
$scope module scuba_vlo_inst $end
$upscope $end
$upscope $end
$scope module cic_cosine_inst $end
$upscope $end
$scope module cic_sine_inst $end
$upscope $end
$scope module mixer_inst $end
$upscope $end
$scope module nco_inst $end
$scope module cosinewave_inst $end
$upscope $end
$scope module sinewave_inst $end
$upscope $end
$upscope $end
$scope module pwm_inst $end
$upscope $end
$scope module uart_rx_inst $end
$upscope $end
$upscope $end
$scope module top $end
$scope module AMDemodulator_inst $end
$scope function sqrt $end
$upscope $end
$upscope $end
$scope module PLL_inst $end
$scope module PLLInst_0 $end
$scope module PLL_INST $end
$upscope $end
$upscope $end
$scope module scuba_vhi_inst $end
$upscope $end
$scope module scuba_vlo_inst $end
$upscope $end
$upscope $end
$scope module cic_cosine_inst $end
$upscope $end
$scope module cic_sine_inst $end
$upscope $end
$scope module mixer_inst $end
$upscope $end
$scope module nco_inst $end
$scope module cosinewave_inst $end
$upscope $end
$scope module sinewave_inst $end
$upscope $end
$upscope $end
$scope module pwm_inst $end
$upscope $end
$scope module uart_rx_inst $end
$upscope $end
$upscope $end
$scope module top $end
$scope module AMDemodulator_inst $end
$scope function sqrt $end
$upscope $end
$upscope $end
$scope module PLL_inst $end
$scope module PLLInst_0 $end
$scope module PLL_INST $end
$upscope $end
$upscope $end
$scope module scuba_vhi_inst $end
$upscope $end
$scope module scuba_vlo_inst $end
$upscope $end
$upscope $end
$scope module cic_cosine_inst $end
$upscope $end
$scope module cic_sine_inst $end
$upscope $end
$scope module mixer_inst $end
$upscope $end
$scope module nco_inst $end
$scope module cosinewave_inst $end
$upscope $end
$scope module sinewave_inst $end
$upscope $end
$upscope $end
$scope module pwm_inst $end
$upscope $end
$scope module uart_rx_inst $end
$upscope $end
$upscope $end
$scope module top $end
$scope module AMDemodulator_inst $end
$scope function sqrt $end
$upscope $end
$upscope $end
$scope module PLL_inst $end
$scope module PLLInst_0 $end
$scope module PLL_INST $end
$upscope $end
$upscope $end
$scope module scuba_vhi_inst $end
$upscope $end
$scope module scuba_vlo_inst $end
$upscope $end
$upscope $end
$scope module cic_cosine_inst $end
$upscope $end
$scope module cic_sine_inst $end
$upscope $end
$scope module mixer_inst $end
$upscope $end
$scope module nco_inst $end
$scope module cosinewave_inst $end
$upscope $end
$scope module sinewave_inst $end
$upscope $end
$upscope $end
$scope module pwm_inst $end
$upscope $end
$scope module uart_rx_inst $end
$upscope $end
$upscope $end
$scope module top $end
$scope module pwm_inst $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11 j&
b1 i&
b10 h&
b0 g&
b100 f&
b1010111 e&
b1000000000 b&
b1100 a&
b1010 `&
b1100 ^&
b1000 ]&
b1100 Z&
b1000 Y&
b1100 U&
b1000000 T&
b1000 S&
b1100 I&
b1001000 1&
b1100 0&
b1000 /&
b1000000000000 .&
b1100 -&
b1001000 s%
b1100 r%
b1000 q%
b1000000000000 p%
b1100 o%
b11001000 P#
b100001101001100010010110100111101010000 O#
b100010001001001010100110100000101000010010011000100010101000100 ,"
b100010001001001010100110100000101000010010011000100010101000100 +"
b100010001001001010100110100000101000010010011000100010101000100 *"
b0 )"
b11001000 ("
b100010001001001010100110100000101000010010011000100010101000100 '"
b1000100010010010101011001000100 &"
b1000100010010010101011001000011 %"
b1000100010010010101011001000010 $"
b1000100010010010101011001000001 #"
b1000101010011100100000101000010010011000100010101000100 ""
b100010001001001010100110100000101000010010011000100010101000100 !"
b11000100110000001100000010111000110000001100000011000000110000 ~
b100001101001100010010110100111101010000 }
b100010001001001010100110100000101000010010011000100010101000100 |
b1000110010000010100110001001100010010010100111001000111 {
b0 z
b0 y
b100010001001001010100110100000101000010010011000100010101000100 x
b1 w
b0 v
b0 u
b100010001001001010100110100000101000010010011000100010101000100 t
b1 s
b0 r
b0 q
b100010001001001010100110100000101000010010011000100010101000100 p
b1 o
b0 n
b1000110010000010100110001001100010010010100111001000111 m
b0 l
b0 k
b1000101010011100100000101000010010011000100010101000100 j
b111 i
b110 h
b11 g
b1010 f
b11000 K
b1100 J
b1000000000 B
b1010 A
b1000000 @
b1000 ?
b1100 >
b1001000 =
b1000 <
b1000000000000 ;
$end
#0
$dumpvars
b0 t&
1s&
1r&
xq&
0p&
b0 o&
b0 n&
b0 m&
bx l&
b0 k&
bx d&
bx c&
bx _&
bx \&
bx [&
bx X&
bx W&
bx V&
bx R&
bx Q&
1P&
bx O&
0N&
bx M&
1L&
1K&
bx J&
bx H&
bx G&
xF&
bx E&
bx D&
bx C&
bx B&
bx A&
bx @&
bx ?&
bx >&
x=&
bx <&
bx ;&
bx :&
bx 9&
bx 8&
bx 7&
bx 6&
bx 5&
bx 4&
bx 3&
bx 2&
bx ,&
bx +&
x*&
bx )&
bx (&
bx '&
bx &&
bx %&
bx $&
bx #&
bx "&
x!&
bx ~%
bx }%
bx |%
bx {%
bx z%
bx y%
bx x%
bx w%
bx v%
bx u%
bx t%
bx n%
bx m%
0l%
1k%
b10 j%
b10 i%
r0 h%
r0 g%
r0 f%
r0 e%
r0 d%
r0 c%
r0 b%
r0 a%
r0 `%
r0 _%
r0 ^%
r0 ]%
r0 \%
r0 [%
r0 Z%
b0 Y%
b0 X%
b0 W%
b0 V%
b0 U%
b0 T%
b0 S%
b0 R%
b0 Q%
b0 P%
b0 O%
b0 N%
b0 M%
b0 L%
b0 K%
b0 J%
r0 I%
r0 H%
b0 G%
r0 F%
r0 E%
r0 D%
r0 C%
r0 B%
r7 A%
r70 @%
r1 ?%
b1 >%
b1 =%
b1 <%
b1 ;%
r0 :%
b0 9%
b0 8%
bx 7%
bx 6%
bx 5%
bx 4%
r0 3%
bx 2%
r0 1%
r0 0%
r0 /%
r0 .%
r0 -%
r0 ,%
r0 +%
r0 *%
b0 )%
r0 (%
r0 '%
r0 &%
r0 %%
b0 $%
b1 #%
b0 "%
b0 !%
b1 ~$
b0 }$
b0 |$
b1 {$
b0 z$
b0 y$
b111 x$
b110 w$
b11 v$
b1010 u$
0t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
0k$
0j$
0i$
0h$
0g$
0f$
ze$
zd$
0c$
0b$
b1 a$
b0 `$
0_$
0^$
0]$
0\$
b0 [$
0Z$
0Y$
1X$
1W$
1V$
1U$
1T$
1S$
0R$
0Q$
0P$
0O$
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0G$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
18$
17$
x6$
15$
14$
13$
12$
11$
00$
0/$
0.$
0-$
0,$
0+$
0*$
1)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
1q#
1p#
1o#
0n#
1m#
0l#
1k#
0j#
0i#
1h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
1Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0N#
b0 M#
b0 L#
zK#
zJ#
0I#
0H#
0G#
0F#
zE#
0D#
0C#
b0 B#
b0z A#
x@#
0?#
0>#
0=#
1<#
0;#
1:#
19#
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
z/#
b0 .#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b1 %#
b0 $#
b10 ##
b1001 "#
b0 !#
b0 ~"
b0 }"
b110 |"
b0 {"
b0 z"
b0 y"
b110 x"
b0 w"
b0 v"
b0 u"
0t"
b0 s"
0r"
b0 q"
0p"
zo"
0n"
1m"
xl"
zk"
0j"
b0 i"
b0 h"
0g"
1f"
1e"
0d"
0c"
0b"
b0 a"
b0 `"
0_"
0^"
0]"
0\"
b0 ["
b0 Z"
b0 Y"
0X"
0W"
0V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
0M"
0L"
0K"
b0 J"
b0 I"
0H"
1G"
b0 F"
b0 E"
b0 D"
0C"
0B"
0A"
0@"
0?"
b1 >"
0="
0<"
0;"
b0 :"
b10 9"
b1001 8"
b0 7"
b0 6"
b0 5"
b110 4"
b0 3"
b0 2"
b0 1"
b110 0"
b0 /"
b0 ."
b0 -"
0e
0d
0c
0b
0a
b0 `
1_
0^
0]
0\
0[
zZ
0Y
0X
zW
1V
0U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx I
bx H
xG
bx F
bx E
bx D
bx C
bx :
x9
bx 8
x7
bx 6
05
14
bx 3
bx 2
bx 1
bx 0
bx /
x.
bx -
x,
z+
z*
x)
x(
x'
x&
x%
x$
x#
x"
z!
$end
#1
