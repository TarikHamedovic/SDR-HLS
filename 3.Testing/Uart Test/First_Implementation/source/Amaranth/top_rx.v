/* Generated by Yosys 0.42+40 (git sha1 a739e21a5, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os) */

(* top =  1  *)
(* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/top_rx.py:36" *)
(* generator = "Amaranth" *)
module top_rx(led, clk, rst, i_Rx_Serial);
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input clk;
  wire clk;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:27" *)
  input i_Rx_Serial;
  wire i_Rx_Serial;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:27" *)
  wire \i_Rx_Serial$4 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/top_rx.py:30" *)
  input [7:0] led;
  wire [7:0] led;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:30" *)
  wire [7:0] o_Rx_Byte;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/top_rx.py:40" *)
  wire o_Rx_Byte1;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:29" *)
  wire o_Rx_DV;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/top_rx.py:39" *)
  wire o_Rx_DV1;
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input rst;
  wire rst;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/top_rx.py:43" *)
  \top_rx.uart_rx  uart_rx (
    .clk(clk),
    .i_Rx_Serial(i_Rx_Serial),
    .o_Rx_Byte(o_Rx_Byte),
    .o_Rx_DV(o_Rx_DV1),
    .rst(rst)
  );
  assign \i_Rx_Serial$4  = i_Rx_Serial;
  assign o_Rx_DV = o_Rx_DV1;
  assign o_Rx_Byte1 = o_Rx_Byte[0];
endmodule

(* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:34" *)
(* generator = "Amaranth" *)
module \top_rx.uart_rx (clk, rst, o_Rx_DV, o_Rx_Byte, i_Rx_Serial);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire [8:0] \$1 ;
  wire \$10 ;
  wire [3:0] \$11 ;
  wire \$12 ;
  wire [16:0] \$13 ;
  reg [7:0] \$14 ;
  reg \$15 ;
  reg \$16 ;
  reg \$17 ;
  reg \$18 ;
  reg \$19 ;
  wire \$2 ;
  reg [15:0] \$20 ;
  reg [2:0] \$21 ;
  reg [2:0] \$22 ;
  reg [7:0] \$23 ;
  reg [7:0] \$24 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire [16:0] \$7 ;
  wire \$8 ;
  wire [16:0] \$9 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:44" *)
  reg [7:0] UartClk = 8'h00;
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input clk;
  wire clk;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:27" *)
  input i_Rx_Serial;
  wire i_Rx_Serial;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:30" *)
  output [7:0] o_Rx_Byte;
  reg [7:0] o_Rx_Byte = 8'h00;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:29" *)
  output o_Rx_DV;
  reg o_Rx_DV = 1'h0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:47" *)
  reg [2:0] r_Bit_Index = 3'h0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:46" *)
  reg [15:0] r_Clock_Count = 16'h0000;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:48" *)
  reg [7:0] r_Rx_Byte = 8'h00;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:49" *)
  reg r_Rx_DV = 1'h0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:51" *)
  reg r_Rx_DV_last = 1'h0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:43" *)
  reg r_Rx_Data = 1'h1;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:42" *)
  reg r_Rx_Data_R = 1'h1;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:50" *)
  reg [2:0] r_SM_Main = 3'h0;
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input rst;
  wire rst;
  assign \$1  = UartClk + (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:54" *) 1'h1;
  assign \$2  = ~ (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:55" *) r_Rx_DV_last;
  assign \$3  = r_Rx_DV & (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:55" *) \$2 ;
  assign \$4  = ! (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:72" *) r_Rx_Data;
  assign \$5  = r_Clock_Count == (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:79" *) 7'h6c;
  assign \$6  = ! (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:80" *) r_Rx_Data;
  assign \$7  = r_Clock_Count + (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:86" *) 1'h1;
  assign \$8  = r_Clock_Count < (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:91" *) 8'hd8;
  assign \$9  = r_Clock_Count + (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:93" *) 1'h1;
  assign \$10  = r_Bit_Index < (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:101" *) 3'h7;
  assign \$11  = r_Bit_Index + (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:103" *) 1'h1;
  assign \$12  = r_Clock_Count < (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:112" *) 8'hd8;
  assign \$13  = r_Clock_Count + (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:114" *) 1'h1;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:44" *)
  always @(posedge clk)
    UartClk <= \$14 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:29" *)
  always @(posedge clk)
    o_Rx_DV <= \$15 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:51" *)
  always @(posedge clk)
    r_Rx_DV_last <= \$16 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:42" *)
  always @(posedge clk)
    r_Rx_Data_R <= \$17 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:43" *)
  always @(posedge clk)
    r_Rx_Data <= \$18 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:49" *)
  always @(posedge clk)
    r_Rx_DV <= \$19 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:46" *)
  always @(posedge clk)
    r_Clock_Count <= \$20 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:47" *)
  always @(posedge clk)
    r_Bit_Index <= \$21 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:50" *)
  always @(posedge clk)
    r_SM_Main <= \$22 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:48" *)
  always @(posedge clk)
    r_Rx_Byte <= \$23 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/Uart/UartRx.py:30" *)
  always @(posedge clk)
    o_Rx_Byte <= \$24 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$14  = \$1 [7:0];
    if (rst) begin
      \$14  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$15  = \$3 ;
    if (rst) begin
      \$15  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$16  = r_Rx_DV;
    if (rst) begin
      \$16  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$17  = i_Rx_Serial;
    if (rst) begin
      \$17  = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$18  = r_Rx_Data_R;
    if (rst) begin
      \$18  = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$19  = r_Rx_DV;
    casez (r_SM_Main)
      3'h0:
          \$19  = 1'h0;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
          end else begin
            \$19  = 1'h1;
          end
      3'h4:
          \$19  = 1'h0;
    endcase
    if (rst) begin
      \$19  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$20  = r_Clock_Count;
    casez (r_SM_Main)
      3'h0:
          \$20  = 16'h0000;
      3'h1:
          (* full_case = 32'd1 *)
          if (\$5 ) begin
            if (\$6 ) begin
              \$20  = 16'h0000;
            end
          end else begin
            \$20  = \$7 [15:0];
          end
      3'h2:
          (* full_case = 32'd1 *)
          if (\$8 ) begin
            \$20  = \$9 [15:0];
          end else begin
            \$20  = 16'h0000;
          end
      3'h3:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
            \$20  = \$13 [15:0];
          end else begin
            \$20  = 16'h0000;
          end
    endcase
    if (rst) begin
      \$20  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$21  = r_Bit_Index;
    casez (r_SM_Main)
      3'h0:
          \$21  = 3'h0;
      3'h1:
          /* empty */;
      3'h2:
          (* full_case = 32'd1 *)
          if (\$10 ) begin
            \$21  = \$11 [2:0];
          end else begin
            \$21  = 3'h0;
          end
    endcase
    if (rst) begin
      \$21  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (r_SM_Main)
      3'h0:
          (* full_case = 32'd1 *)
          if (\$4 ) begin
            \$22  = 3'h1;
          end else begin
            \$22  = 3'h0;
          end
      3'h1:
          (* full_case = 32'd1 *)
          if (\$5 ) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
              \$22  = 3'h2;
            end else begin
              \$22  = 3'h0;
            end
          end else begin
            \$22  = 3'h1;
          end
      3'h2:
          (* full_case = 32'd1 *)
          if (\$10 ) begin
            \$22  = 3'h2;
          end else begin
            \$22  = 3'h3;
          end
      3'h3:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
            \$22  = 3'h3;
          end else begin
            \$22  = 3'h4;
          end
      3'h4:
          \$22  = 3'h0;
      default:
          \$22  = 3'h0;
    endcase
    if (rst) begin
      \$22  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$23  = r_Rx_Byte;
    if (rst) begin
      \$23  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$24  = o_Rx_Byte;
    casez (r_SM_Main)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
          end else begin
            \$24  = r_Rx_Byte;
          end
    endcase
    if (rst) begin
      \$24  = 8'h00;
    end
  end
endmodule
