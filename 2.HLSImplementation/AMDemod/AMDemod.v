/* Generated by Yosys 0.42+40 (git sha1 a739e21a5, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os) */

(* top =  1  *)
(* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:43" *)
(* generator = "Amaranth" *)
module top(Q_in, clk, rst, d_out, I_in);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire [23:0] \$1 ;
  reg [11:0] \$10 ;
  reg [23:0] \$11 ;
  reg [23:0] \$12 ;
  reg [24:0] \$13 ;
  reg \$14 ;
  reg [1:0] \$15 ;
  reg [24:0] \$16 ;
  wire [23:0] \$2 ;
  wire [24:0] \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  reg [11:0] \$7 ;
  reg [11:0] \$8 ;
  reg [11:0] \$9 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:35" *)
  input [11:0] I_in;
  wire [11:0] I_in;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:51" *)
  reg [11:0] MultDataA = 12'h000;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:52" *)
  reg [11:0] MultDataB = 12'h000;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:55" *)
  reg [11:0] MultDataC = 12'h000;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:56" *)
  reg [11:0] MultDataD = 12'h000;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:53" *)
  reg [23:0] MultResult1 = 24'h000000;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:57" *)
  reg [23:0] MultResult2 = 24'h000000;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:36" *)
  input [11:0] Q_in;
  wire [11:0] Q_in;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:59" *)
  reg [24:0] SquareSum = 25'h0000000;
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input clk;
  wire clk;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:39" *)
  output [24:0] d_out;
  reg [24:0] d_out = 25'h0000000;
  (* src = "/usr/lib/python3.10/contextlib.py:142" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:39" *)
  wire [31:0] root;
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input rst;
  wire rst;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:33" *)
  reg start = 1'h0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:38" *)
  wire valid;
  assign \$1  = $signed(MultDataA) * (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:66" *) $signed(MultDataB);
  assign \$2  = $signed(MultDataC) * (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:67" *) $signed(MultDataD);
  assign \$3  = $signed(MultResult1) + (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:68" *) $signed(MultResult2);
  assign \$4  = ! (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_dsl.py:490" *) fsm_state;
  assign \$5  = fsm_state == (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_dsl.py:490" *) 1'h1;
  assign \$6  = fsm_state == (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_dsl.py:490" *) 2'h2;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:51" *)
  always @(posedge clk)
    MultDataA <= \$7 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:52" *)
  always @(posedge clk)
    MultDataB <= \$8 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:55" *)
  always @(posedge clk)
    MultDataC <= \$9 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:56" *)
  always @(posedge clk)
    MultDataD <= \$10 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:53" *)
  always @(posedge clk)
    MultResult1 <= \$11 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:57" *)
  always @(posedge clk)
    MultResult2 <= \$12 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:59" *)
  always @(posedge clk)
    SquareSum <= \$13 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:33" *)
  always @(posedge clk)
    start <= \$14 ;
  (* src = "/usr/lib/python3.10/contextlib.py:142" *)
  always @(posedge clk)
    fsm_state <= \$15 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:39" *)
  always @(posedge clk)
    d_out <= \$16 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/AMDemod.py:47" *)
  \top.sqrt  sqrt (
    .clk(clk),
    .root(root),
    .rst(rst),
    .start(start),
    .valid(valid)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$7  = I_in;
    if (rst) begin
      \$7  = 12'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$8  = I_in;
    if (rst) begin
      \$8  = 12'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$9  = Q_in;
    if (rst) begin
      \$9  = 12'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$10  = Q_in;
    if (rst) begin
      \$10  = 12'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$11  = \$1 ;
    if (rst) begin
      \$11  = 24'h000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$12  = \$2 ;
    if (rst) begin
      \$12  = 24'h000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$13  = \$3 ;
    if (rst) begin
      \$13  = 25'h0000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$14  = start;
    casez (fsm_state)
      2'h0:
          \$14  = 1'h0;
      2'h1:
          \$14  = 1'h1;
      2'h2:
          \$14  = 1'h0;
    endcase
    if (rst) begin
      \$14  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$15  = fsm_state;
    casez (fsm_state)
      2'h0:
          \$15  = 2'h1;
      2'h1:
          \$15  = 2'h2;
      2'h2:
          if (valid) begin
            \$15  = 2'h0;
          end
    endcase
    if (rst) begin
      \$15  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$16  = d_out;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          if (valid) begin
            \$16  = root[24:0];
          end
    endcase
    if (rst) begin
      \$16  = 25'h0000000;
    end
  end

  //----------------------------- 
  // For simulation only
  //----------------------------- 
  initial begin
    $dumpfile("AMDemod_waves.vcd");
    $dumpvars;
  end
endmodule

(* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:50" *)
(* generator = "Amaranth" *)
module \top.sqrt (rst, start, valid, root, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$2  = 0;
  wire [34:0] \$1 ;
  reg [31:0] \$10 ;
  reg [33:0] \$11 ;
  reg [31:0] \$12 ;
  reg [31:0] \$13 ;
  wire \$2 ;
  wire [32:0] \$3 ;
  wire \$4 ;
  wire [4:0] \$5 ;
  reg \$6 ;
  reg \$7 ;
  reg [3:0] \$8 ;
  reg [31:0] \$9 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:45" *)
  reg [33:0] ac = 34'h000000000;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:54" *)
  reg [31:0] ac_next;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:34" *)
  reg busy = 1'h0;
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input clk;
  wire clk;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:47" *)
  reg [3:0] i = 4'h0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:44" *)
  reg [31:0] q = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:53" *)
  reg [31:0] q_next;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:35" *)
  wire [31:0] rad;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:40" *)
  reg [31:0] rem = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:39" *)
  output [31:0] root;
  reg [31:0] root = 32'd0;
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input rst;
  wire rst;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:33" *)
  input start;
  wire start;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:46" *)
  wire [33:0] test_res;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:38" *)
  output valid;
  reg valid = 1'h0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:43" *)
  reg [31:0] x = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:52" *)
  reg [31:0] x_next;
  assign \$1  = ac - (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:58" *) { q, 2'h1 };
  assign \$2  = ! (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:60" *) \$1 [33];
  assign \$4  = i == (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:81" *) 4'hf;
  assign \$5  = i + (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:90" *) 1'h1;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:34" *)
  always @(posedge clk)
    busy <= \$6 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:38" *)
  always @(posedge clk)
    valid <= \$7 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:47" *)
  always @(posedge clk)
    i <= \$8 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:44" *)
  always @(posedge clk)
    q <= \$9 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:43" *)
  always @(posedge clk)
    x <= \$10 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:45" *)
  always @(posedge clk)
    ac <= \$11 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:39" *)
  always @(posedge clk)
    root <= \$12 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt_int.py:40" *)
  always @(posedge clk)
    rem <= \$13 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    (* full_case = 32'd1 *)
    if (\$2 ) begin
      x_next = { x[29:0], 2'h0 };
    end else begin
      x_next = { x[29:0], 2'h0 };
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    (* full_case = 32'd1 *)
    if (\$2 ) begin
      ac_next = { \$1 [29:0], x[31:30] };
    end else begin
      ac_next = { ac[29:0], x[31:30] };
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    (* full_case = 32'd1 *)
    if (\$2 ) begin
      q_next = { q[30:0], 1'h1 };
    end else begin
      q_next = \$3 [31:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$6  = busy;
    if (start) begin
      \$6  = 1'h1;
    end else if (busy) begin
      if (\$4 ) begin
        \$6  = 1'h0;
      end
    end
    if (rst) begin
      \$6  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$7  = valid;
    if (start) begin
      \$7  = 1'h0;
    end else if (busy) begin
      if (\$4 ) begin
        \$7  = 1'h1;
      end
    end
    if (rst) begin
      \$7  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$8  = i;
    if (start) begin
      \$8  = 4'h0;
    end else if (busy) begin
      (* full_case = 32'd1 *)
      if (\$4 ) begin
      end else begin
        \$8  = \$5 [3:0];
      end
    end
    if (rst) begin
      \$8  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$9  = q;
    if (start) begin
      \$9  = 32'd0;
    end else if (busy) begin
      (* full_case = 32'd1 *)
      if (\$4 ) begin
      end else begin
        \$9  = q_next;
      end
    end
    if (rst) begin
      \$9  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$10  = x;
    if (start) begin
      \$10  = 32'd0;
    end else if (busy) begin
      (* full_case = 32'd1 *)
      if (\$4 ) begin
      end else begin
        \$10  = x_next;
      end
    end
    if (rst) begin
      \$10  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$11  = ac;
    if (start) begin
      \$11  = 34'h000000000;
    end else if (busy) begin
      (* full_case = 32'd1 *)
      if (\$4 ) begin
      end else begin
        \$11  = { 2'h0, ac_next };
      end
    end
    if (rst) begin
      \$11  = 34'h000000000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$12  = root;
    if (start) begin
    end else if (busy) begin
      if (\$4 ) begin
        \$12  = q_next;
      end
    end
    if (rst) begin
      \$12  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$13  = rem;
    if (start) begin
    end else if (busy) begin
      if (\$4 ) begin
        \$13  = { 2'h0, ac_next[29:0] };
      end
    end
    if (rst) begin
      \$13  = 32'd0;
    end
  end
  assign test_res = \$1 [33:0];
  assign rad = 32'd0;
  assign \$3  = { q, 1'h0 };

  //----------------------------- 
  // For simulation only
  //----------------------------- 
  initial begin
    $dumpfile("AMDemod_waves.vcd");
    $dumpvars;
  end
endmodule
