/* Generated by Yosys 0.42+40 (git sha1 a739e21a5, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os) */

(* top =  1  *)
(* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:41" *)
(* generator = "Amaranth" *)
module top(num_in, clk, rst, done, sq_root, reset);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire \$1 ;
  wire \$10 ;
  reg \$11 ;
  reg [3:0] \$12 ;
  reg [2:0] \$13 ;
  reg [7:0] \$14 ;
  reg [5:0] \$15 ;
  reg [5:0] \$16 ;
  reg [5:0] \$17 ;
  reg [3:0] \$18 ;
  wire \$2 ;
  wire \$3 ;
  wire [3:0] \$4 ;
  wire [3:0] \$5 ;
  wire \$6 ;
  wire [6:0] \$7 ;
  wire [6:0] \$8 ;
  wire \$9 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:45" *)
  reg [7:0] a = 8'h00;
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input clk;
  wire clk;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:36" *)
  output done;
  reg done = 1'h0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:51" *)
  reg [2:0] i = 3'h0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:46" *)
  reg [5:0] left = 6'h00;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:33" *)
  input [7:0] num_in;
  wire [7:0] num_in;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:49" *)
  reg [3:0] q = 4'h0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:48" *)
  reg [5:0] r = 6'h00;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:32" *)
  input reset;
  wire reset;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:47" *)
  reg [5:0] right = 6'h00;
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input rst;
  wire rst;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:37" *)
  output [3:0] sq_root;
  reg [3:0] sq_root = 4'h0;
  assign \$2  = ! (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:65" *) i;
  assign \$3  = i < (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:71" *) 3'h4;
  assign \$4  = i + (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:69" *) 1'h1;
  assign \$5  = i + (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:72" *) 1'h1;
  assign \$7  = left + (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:81" *) right;
  assign \$8  = left - (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:83" *) right;
  assign \$9  = ~ (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:85" *) r[5];
  assign \$10  = i == (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:87" *) 3'h4;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:36" *)
  always @(posedge clk)
    done <= \$11 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:37" *)
  always @(posedge clk)
    sq_root <= \$12 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:51" *)
  always @(posedge clk)
    i <= \$13 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:45" *)
  always @(posedge clk)
    a <= \$14 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:46" *)
  always @(posedge clk)
    left <= \$15 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:47" *)
  always @(posedge clk)
    right <= \$16 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:48" *)
  always @(posedge clk)
    r <= \$17 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/AMDemod/sqrt/method3/square_root.py:49" *)
  always @(posedge clk)
    q <= \$18 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$11  = done;
    (* full_case = 32'd1 *)
    if (\$1 ) begin
      \$11  = 1'h0;
    end else begin
      if (\$2 ) begin
        \$11  = 1'h0;
      end
    end
    if (\$10 ) begin
      \$11  = 1'h1;
    end
    if (rst) begin
      \$11  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$12  = sq_root;
    if (\$1 ) begin
      \$12  = 4'h0;
    end
    if (\$10 ) begin
      \$12  = q;
    end
    if (rst) begin
      \$12  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$13  = i;
    (* full_case = 32'd1 *)
    if (\$1 ) begin
      \$13  = 3'h0;
    end else begin
      if (\$2 ) begin
        \$13  = \$4 [2:0];
      end else if (\$3 ) begin
        \$13  = \$5 [2:0];
      end
    end
    if (\$10 ) begin
      \$13  = 3'h0;
    end
    if (rst) begin
      \$13  = 3'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$14  = { 3'h0, a[4:0] };
    if (rst) begin
      \$14  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$15  = { 2'h0, r[2:0], a[6] };
    if (\$10 ) begin
      \$15  = 6'h00;
    end
    if (rst) begin
      \$15  = 6'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$16  = { q, r[5], 1'h1 };
    if (\$10 ) begin
      \$16  = 6'h00;
    end
    if (rst) begin
      \$16  = 6'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (\$6 ) begin
      \$17  = \$7 [5:0];
    end else begin
      \$17  = \$8 [5:0];
    end
    if (\$10 ) begin
      \$17  = 6'h00;
    end
    if (rst) begin
      \$17  = 6'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$18  = { 1'h0, q[1:0], \$9  };
    if (\$10 ) begin
      \$18  = 4'h0;
    end
    if (rst) begin
      \$18  = 4'h0;
    end
  end
  assign \$1  = reset;
  assign \$6  = r[5];
endmodule
