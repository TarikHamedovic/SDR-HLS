/* Generated by Yosys 0.40+22 (git sha1 fa0c5c1d4, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os) */

(* top =  1  *)
(* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:41" *)
(* generator = "Amaranth" *)
module CIC(data_in, clk, rst, data_out, data_clk, gain);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire [32:0] \$1 ;
  wire [32:0] \$10 ;
  wire [32:0] \$11 ;
  wire [32:0] \$12 ;
  wire [32:0] \$13 ;
  wire [32:0] \$14 ;
  wire [8:0] \$15 ;
  wire [31:0] \$16 ;
  reg [31:0] \$17 ;
  reg [31:0] \$18 ;
  reg [31:0] \$19 ;
  wire [32:0] \$2 ;
  reg [31:0] \$20 ;
  reg [31:0] \$21 ;
  reg [3:0] \$22 ;
  reg [31:0] \$23 ;
  reg \$24 ;
  reg \$25 ;
  reg \$26 ;
  reg [31:0] \$27 ;
  reg [31:0] \$28 ;
  reg [31:0] \$29 ;
  wire [32:0] \$3 ;
  reg [31:0] \$30 ;
  reg [31:0] \$31 ;
  reg [31:0] \$32 ;
  reg [31:0] \$33 ;
  reg [31:0] \$34 ;
  reg [31:0] \$35 ;
  reg [31:0] \$36 ;
  reg [11:0] \$37 ;
  wire [32:0] \$4 ;
  wire [32:0] \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire [4:0] \$8 ;
  wire [4:0] \$9 ;
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input clk;
  wire clk;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:66" *)
  reg [31:0] comb10 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:58" *)
  reg [31:0] comb6 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:60" *)
  reg [31:0] comb7 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:62" *)
  reg [31:0] comb8 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:64" *)
  reg [31:0] comb9 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:59" *)
  reg [31:0] comb_d6 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:61" *)
  reg [31:0] comb_d7 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:63" *)
  reg [31:0] comb_d8 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:65" *)
  reg [31:0] comb_d9 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:68" *)
  reg [3:0] count = 4'h0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:38" *)
  output data_clk;
  reg data_clk = 1'h0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:33" *)
  input [11:0] data_in;
  wire [11:0] data_in;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:37" *)
  output [11:0] data_out;
  reg [11:0] data_out = 12'h000;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:71" *)
  reg decimation_clk = 1'h0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:34" *)
  input [7:0] gain;
  wire [7:0] gain;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:51" *)
  reg [31:0] integrator1 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:52" *)
  reg [31:0] integrator2 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:53" *)
  reg [31:0] integrator3 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:54" *)
  reg [31:0] integrator4 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:55" *)
  reg [31:0] integrator5 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:48" *)
  reg [31:0] integrator_d_tmp = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:47" *)
  reg [31:0] integrator_tmp = 32'd0;
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input rst;
  wire rst;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:70" *)
  reg valid_comb = 1'h0;
  assign \$1  = $signed(data_in) + (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:75" *) $signed(integrator1);
  assign \$2  = $signed(integrator1) + (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:76" *) $signed(integrator2);
  assign \$3  = $signed(integrator2) + (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:77" *) $signed(integrator3);
  assign \$4  = $signed(integrator3) + (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:78" *) $signed(integrator4);
  assign \$5  = $signed(integrator4) + (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:79" *) $signed(integrator5);
  assign \$6  = count == (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:83" *) 4'hf;
  assign \$7  = count == (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:91" *) 4'h8;
  assign \$8  = count + (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:94" *) 1'h1;
  assign \$9  = count + (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:99" *) 1'h1;
  assign \$10  = $signed(integrator_tmp) - (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:110" *) $signed(integrator_d_tmp);
  assign \$11  = $signed(comb6) - (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:113" *) $signed(comb_d6);
  assign \$12  = $signed(comb7) - (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:116" *) $signed(comb_d7);
  assign \$13  = $signed(comb8) - (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:119" *) $signed(comb_d8);
  assign \$14  = $signed(comb9) - (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:122" *) $signed(comb_d9);
  assign \$15  = 5'h14 - (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:124" *) gain;
  assign \$16  = $signed(comb10) >>> (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:124" *) \$15 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:51" *)
  always @(posedge clk)
    integrator1 <= \$17 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:52" *)
  always @(posedge clk)
    integrator2 <= \$18 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:53" *)
  always @(posedge clk)
    integrator3 <= \$19 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:54" *)
  always @(posedge clk)
    integrator4 <= \$20 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:55" *)
  always @(posedge clk)
    integrator5 <= \$21 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:68" *)
  always @(posedge clk)
    count <= \$22 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:47" *)
  always @(posedge clk)
    integrator_tmp <= \$23 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:71" *)
  always @(posedge clk)
    decimation_clk <= \$24 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:70" *)
  always @(posedge clk)
    valid_comb <= \$25 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:38" *)
  always @(posedge clk)
    data_clk <= \$26 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:48" *)
  always @(posedge clk)
    integrator_d_tmp <= \$27 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:58" *)
  always @(posedge clk)
    comb6 <= \$28 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:59" *)
  always @(posedge clk)
    comb_d6 <= \$29 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:60" *)
  always @(posedge clk)
    comb7 <= \$30 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:61" *)
  always @(posedge clk)
    comb_d7 <= \$31 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:62" *)
  always @(posedge clk)
    comb8 <= \$32 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:63" *)
  always @(posedge clk)
    comb_d8 <= \$33 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:64" *)
  always @(posedge clk)
    comb9 <= \$34 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:65" *)
  always @(posedge clk)
    comb_d9 <= \$35 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:66" *)
  always @(posedge clk)
    comb10 <= \$36 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/cic.py:37" *)
  always @(posedge clk)
    data_out <= \$37 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$17  = \$1 [31:0];
    if (rst) begin
      \$17  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$18  = \$2 [31:0];
    if (rst) begin
      \$18  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$19  = \$3 [31:0];
    if (rst) begin
      \$19  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$20  = \$4 [31:0];
    if (rst) begin
      \$20  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$21  = \$5 [31:0];
    if (rst) begin
      \$21  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (\$6 ) begin
      \$22  = 4'h0;
    end else if (\$7 ) begin
      \$22  = \$8 [3:0];
    end else begin
      \$22  = \$9 [3:0];
    end
    if (rst) begin
      \$22  = 4'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$23  = integrator_tmp;
    if (\$6 ) begin
      \$23  = integrator5;
    end
    if (rst) begin
      \$23  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$24  = decimation_clk;
    if (\$6 ) begin
      \$24  = 1'h1;
    end else if (\$7 ) begin
      \$24  = 1'h0;
    end
    if (rst) begin
      \$24  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (\$6 ) begin
      \$25  = 1'h1;
    end else if (\$7 ) begin
      \$25  = 1'h0;
    end else begin
      \$25  = 1'h0;
    end
    if (rst) begin
      \$25  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$26  = decimation_clk;
    if (rst) begin
      \$26  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$27  = integrator_d_tmp;
    if (valid_comb) begin
      \$27  = integrator_tmp;
    end
    if (rst) begin
      \$27  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$28  = comb6;
    if (valid_comb) begin
      \$28  = \$10 [31:0];
    end
    if (rst) begin
      \$28  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$29  = comb_d6;
    if (valid_comb) begin
      \$29  = comb6;
    end
    if (rst) begin
      \$29  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$30  = comb7;
    if (valid_comb) begin
      \$30  = \$11 [31:0];
    end
    if (rst) begin
      \$30  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$31  = comb_d7;
    if (valid_comb) begin
      \$31  = comb7;
    end
    if (rst) begin
      \$31  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$32  = comb8;
    if (valid_comb) begin
      \$32  = \$12 [31:0];
    end
    if (rst) begin
      \$32  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$33  = comb_d8;
    if (valid_comb) begin
      \$33  = comb8;
    end
    if (rst) begin
      \$33  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$34  = comb9;
    if (valid_comb) begin
      \$34  = \$13 [31:0];
    end
    if (rst) begin
      \$34  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$35  = comb_d9;
    if (valid_comb) begin
      \$35  = comb9;
    end
    if (rst) begin
      \$35  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$36  = comb10;
    if (valid_comb) begin
      \$36  = \$14 [31:0];
    end
    if (rst) begin
      \$36  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$37  = data_out;
    if (valid_comb) begin
      \$37  = \$16 [11:0];
    end
    if (rst) begin
      \$37  = 12'h000;
    end
  end
endmodule
