/* Generated by Yosys 0.42+40 (git sha1 a739e21a5, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os) */

(* top =  1  *)
(* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:40" *)
(* generator = "Amaranth" *)
module top(d_in, clk, rst, d_out, d_clk, Gain);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire [32:0] \$1 ;
  wire [32:0] \$10 ;
  wire [32:0] \$11 ;
  wire [32:0] \$12 ;
  wire [32:0] \$13 ;
  wire [32:0] \$14 ;
  wire [8:0] \$15 ;
  wire [31:0] \$16 ;
  reg [31:0] \$17 ;
  reg [31:0] \$18 ;
  reg [31:0] \$19 ;
  wire [32:0] \$2 ;
  reg [31:0] \$20 ;
  reg [31:0] \$21 ;
  reg [15:0] \$22 ;
  reg [31:0] \$23 ;
  reg \$24 ;
  reg \$25 ;
  reg \$26 ;
  reg [31:0] \$27 ;
  reg [31:0] \$28 ;
  reg [31:0] \$29 ;
  wire [32:0] \$3 ;
  reg [31:0] \$30 ;
  reg [31:0] \$31 ;
  reg [31:0] \$32 ;
  reg [31:0] \$33 ;
  reg [31:0] \$34 ;
  reg [31:0] \$35 ;
  reg [31:0] \$36 ;
  reg [31:0] \$37 ;
  reg [11:0] \$38 ;
  wire [32:0] \$4 ;
  wire [32:0] \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire [16:0] \$8 ;
  wire [16:0] \$9 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:32" *)
  input [7:0] Gain;
  wire [7:0] Gain;
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input clk;
  wire clk;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:67" *)
  reg [15:0] count = 16'h0000;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:49" *)
  reg [31:0] d1 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:64" *)
  reg [31:0] d10 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:50" *)
  reg [31:0] d2 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:51" *)
  reg [31:0] d3 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:52" *)
  reg [31:0] d4 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:53" *)
  reg [31:0] d5 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:56" *)
  reg [31:0] d6 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:58" *)
  reg [31:0] d7 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:60" *)
  reg [31:0] d8 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:62" *)
  reg [31:0] d9 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:37" *)
  output d_clk;
  reg d_clk = 1'h0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:70" *)
  reg d_clk_tmp = 1'h0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:57" *)
  reg [31:0] d_d6 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:59" *)
  reg [31:0] d_d7 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:61" *)
  reg [31:0] d_d8 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:63" *)
  reg [31:0] d_d9 = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:46" *)
  reg [31:0] d_d_tmp = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:33" *)
  input [11:0] d_in;
  wire [11:0] d_in;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:36" *)
  output [11:0] d_out;
  reg [11:0] d_out = 12'h000;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:66" *)
  reg [31:0] d_scaled = 32'd0;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:45" *)
  reg [31:0] d_tmp = 32'd0;
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input rst;
  wire rst;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:69" *)
  reg v_comb = 1'h0;
  assign \$1  = $signed(d_in) + (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:75" *) $signed(d1);
  assign \$2  = $signed(d1) + (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:76" *) $signed(d2);
  assign \$3  = $signed(d2) + (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:77" *) $signed(d3);
  assign \$4  = $signed(d3) + (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:78" *) $signed(d4);
  assign \$5  = $signed(d4) + (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:79" *) $signed(d5);
  assign \$6  = count == (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:83" *) 4'hf;
  assign \$7  = count == (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:91" *) 4'h8;
  assign \$8  = count + (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:94" *) 1'h1;
  assign \$9  = count + (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:99" *) 1'h1;
  assign \$10  = $signed(d_tmp) - (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:110" *) $signed(d_d_tmp);
  assign \$11  = $signed(d6) - (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:113" *) $signed(d_d6);
  assign \$12  = $signed(d7) - (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:116" *) $signed(d_d7);
  assign \$13  = $signed(d8) - (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:119" *) $signed(d_d8);
  assign \$14  = $signed(d9) - (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:122" *) $signed(d_d9);
  assign \$15  = 5'h14 - (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:126" *) Gain;
  assign \$16  = $signed(d10) >>> (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:126" *) \$15 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:49" *)
  always @(posedge clk)
    d1 <= \$17 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:50" *)
  always @(posedge clk)
    d2 <= \$18 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:51" *)
  always @(posedge clk)
    d3 <= \$19 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:52" *)
  always @(posedge clk)
    d4 <= \$20 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:53" *)
  always @(posedge clk)
    d5 <= \$21 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:67" *)
  always @(posedge clk)
    count <= \$22 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:45" *)
  always @(posedge clk)
    d_tmp <= \$23 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:70" *)
  always @(posedge clk)
    d_clk_tmp <= \$24 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:69" *)
  always @(posedge clk)
    v_comb <= \$25 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:37" *)
  always @(posedge clk)
    d_clk <= \$26 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:46" *)
  always @(posedge clk)
    d_d_tmp <= \$27 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:56" *)
  always @(posedge clk)
    d6 <= \$28 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:57" *)
  always @(posedge clk)
    d_d6 <= \$29 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:58" *)
  always @(posedge clk)
    d7 <= \$30 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:59" *)
  always @(posedge clk)
    d_d7 <= \$31 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:60" *)
  always @(posedge clk)
    d8 <= \$32 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:61" *)
  always @(posedge clk)
    d_d8 <= \$33 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:62" *)
  always @(posedge clk)
    d9 <= \$34 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:63" *)
  always @(posedge clk)
    d_d9 <= \$35 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:64" *)
  always @(posedge clk)
    d10 <= \$36 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:66" *)
  always @(posedge clk)
    d_scaled <= \$37 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/CIC/CIC.py:36" *)
  always @(posedge clk)
    d_out <= \$38 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$17  = \$1 [31:0];
    if (rst) begin
      \$17  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$18  = \$2 [31:0];
    if (rst) begin
      \$18  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$19  = \$3 [31:0];
    if (rst) begin
      \$19  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$20  = \$4 [31:0];
    if (rst) begin
      \$20  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$21  = \$5 [31:0];
    if (rst) begin
      \$21  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (\$6 ) begin
      \$22  = 16'h0000;
    end else if (\$7 ) begin
      \$22  = \$8 [15:0];
    end else begin
      \$22  = \$9 [15:0];
    end
    if (rst) begin
      \$22  = 16'h0000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$23  = d_tmp;
    if (\$6 ) begin
      \$23  = d5;
    end
    if (rst) begin
      \$23  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$24  = d_clk_tmp;
    if (\$6 ) begin
      \$24  = 1'h1;
    end else if (\$7 ) begin
      \$24  = 1'h0;
    end
    if (rst) begin
      \$24  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (\$6 ) begin
      \$25  = 1'h1;
    end else if (\$7 ) begin
      \$25  = 1'h0;
    end else begin
      \$25  = 1'h0;
    end
    if (rst) begin
      \$25  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$26  = d_clk_tmp;
    if (rst) begin
      \$26  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$27  = d_d_tmp;
    if (v_comb) begin
      \$27  = d_tmp;
    end
    if (rst) begin
      \$27  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$28  = d6;
    if (v_comb) begin
      \$28  = \$10 [31:0];
    end
    if (rst) begin
      \$28  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$29  = d_d6;
    if (v_comb) begin
      \$29  = d6;
    end
    if (rst) begin
      \$29  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$30  = d7;
    if (v_comb) begin
      \$30  = \$11 [31:0];
    end
    if (rst) begin
      \$30  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$31  = d_d7;
    if (v_comb) begin
      \$31  = d7;
    end
    if (rst) begin
      \$31  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$32  = d8;
    if (v_comb) begin
      \$32  = \$12 [31:0];
    end
    if (rst) begin
      \$32  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$33  = d_d8;
    if (v_comb) begin
      \$33  = d8;
    end
    if (rst) begin
      \$33  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$34  = d9;
    if (v_comb) begin
      \$34  = \$13 [31:0];
    end
    if (rst) begin
      \$34  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$35  = d_d9;
    if (v_comb) begin
      \$35  = d9;
    end
    if (rst) begin
      \$35  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$36  = d10;
    if (v_comb) begin
      \$36  = \$14 [31:0];
    end
    if (rst) begin
      \$36  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$37  = d_scaled;
    if (v_comb) begin
      \$37  = d10;
    end
    if (rst) begin
      \$37  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$38  = d_out;
    if (v_comb) begin
      \$38  = \$16 [11:0];
    end
    if (rst) begin
      \$38  = 12'h000;
    end
  end
endmodule
