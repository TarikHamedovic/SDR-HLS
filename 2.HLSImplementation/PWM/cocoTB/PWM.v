/* Generated by Yosys 0.41+108 (git sha1 111b747d2, g++ 11.4.0-1ubuntu1~22.04 -fPIC -Os) */

(* top =  1  *)
(* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:39" *)
(* generator = "Amaranth" *)
module top(clk, rst, PWMOut, DataIn);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire [10:0] \$1 ;
  wire \$2 ;
  wire [12:0] \$3 ;
  wire \$4 ;
  reg [9:0] \$5 ;
  reg [11:0] \$6 ;
  reg \$7 ;
  (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:32" *)
  input [11:0] DataIn;
  wire [11:0] DataIn;
  (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:42" *)
  reg [11:0] DataInReg = 12'h000;
  (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:35" *)
  output PWMOut;
  reg PWMOut = 1'h0;
  (* src = "/home/user/.local/lib/python3.10/site-packages/amaranth/hdl/_ir.py:270" *)
  input clk;
  wire clk;
  (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:43" *)
  reg [9:0] counter = 10'h000;
  (* src = "/home/user/.local/lib/python3.10/site-packages/amaranth/hdl/_ir.py:270" *)
  input rst;
  wire rst;
  assign \$3  = DataIn + (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:50" *) 10'h200;
  assign \$4  = counter > (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:53" *) DataInReg[9:0];
  (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:43" *)
  always @(posedge clk)
    counter <= \$5 ;
  (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:42" *)
  always @(posedge clk)
    DataInReg <= \$6 ;
  (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:35" *)
  always @(posedge clk)
    PWMOut <= \$7 ;
  assign \$1  = counter + (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:46" *) 1'h1;
  assign \$2  = ! (* src = "/home/user/SDR-HLS/HLSImplementation/PWM/PWM.py:49" *) counter;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$5  = \$1 [9:0];
    if (rst) begin
      \$5  = 10'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$6  = DataInReg;
    if (\$2 ) begin
      \$6  = \$3 [11:0];
    end
    if (rst) begin
      \$6  = 12'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (\$4 ) begin
      \$7  = 1'h0;
    end else begin
      \$7  = 1'h1;
    end
    if (rst) begin
      \$7  = 1'h0;
    end
  end

  //----------------------------- 
  // For simulation only
  //----------------------------- 
  initial begin
    $dumpfile("PWM_waves.vcd");
    $dumpvars;
  end
endmodule
