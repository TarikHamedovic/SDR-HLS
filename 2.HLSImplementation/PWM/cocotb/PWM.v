/* Generated by Yosys 0.40+22 (git sha1 fa0c5c1d4, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os) */

(* top =  1  *)
(* src = "/home/user/SDR-HLS/2.HLSImplementation/PWM/pwm.py:40" *)
(* generator = "Amaranth" *)
module top(clk, rst, pwm_out, data_in);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire [10:0] \$1 ;
  wire \$2 ;
  wire [12:0] \$3 ;
  wire \$4 ;
  reg [9:0] \$5 ;
  reg [11:0] \$6 ;
  reg \$7 ;
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input clk;
  wire clk;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/PWM/pwm.py:44" *)
  reg [9:0] count = 10'h000;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/PWM/pwm.py:33" *)
  input [11:0] data_in;
  wire [11:0] data_in;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/PWM/pwm.py:43" *)
  reg [11:0] data_in_reg = 12'h000;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/PWM/pwm.py:36" *)
  output pwm_out;
  reg pwm_out = 1'h0;
  (* src = "/home/user/FPGA/tools/amaranth/amaranth/hdl/_ir.py:215" *)
  input rst;
  wire rst;
  assign \$3  = data_in + (* src = "/home/user/SDR-HLS/2.HLSImplementation/PWM/pwm.py:51" *) 10'h200;
  assign \$4  = count > (* src = "/home/user/SDR-HLS/2.HLSImplementation/PWM/pwm.py:54" *) data_in_reg[9:0];
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/PWM/pwm.py:44" *)
  always @(posedge clk)
    count <= \$5 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/PWM/pwm.py:43" *)
  always @(posedge clk)
    data_in_reg <= \$6 ;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/PWM/pwm.py:36" *)
  always @(posedge clk)
    pwm_out <= \$7 ;
  assign \$1  = count + (* src = "/home/user/SDR-HLS/2.HLSImplementation/PWM/pwm.py:47" *) 1'h1;
  assign \$2  = ! (* src = "/home/user/SDR-HLS/2.HLSImplementation/PWM/pwm.py:50" *) count;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$5  = \$1 [9:0];
    if (rst) begin
      \$5  = 10'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$6  = data_in_reg;
    if (\$2 ) begin
      \$6  = \$3 [11:0];
    end
    if (rst) begin
      \$6  = 12'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    if (\$4 ) begin
      \$7  = 1'h0;
    end else begin
      \$7  = 1'h1;
    end
    if (rst) begin
      \$7  = 1'h0;
    end
  end
endmodule
