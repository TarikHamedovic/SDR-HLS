/* Automatically generated by Amaranth 0.5.1.dev3. Do not edit. */
/* Generated by Yosys 0.40+22 (git sha1 fa0c5c1d4, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os) */

module top(antenna_0__rf_in__io, pwm_0__pwm_out_p1__io, pwm_0__pwm_out_p2__io, pwm_0__pwm_out_p3__io, pwm_0__pwm_out_p4__io, pwm_0__pwm_out_n1__io, pwm_0__pwm_out_n2__io, pwm_0__pwm_out_n3__io, pwm_0__pwm_out_n4__io, pwm_0__pwm_out__io, uart_0__rx__io, uart_0__tx__io, uart_0__rts__io, uart_0__dtr__io, led_0__io, led_1__io, led_2__io, led_3__io, led_4__io, led_5__io, led_6__io
, led_7__io, clk25_0__io);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire [64:0] \$1 ;
  wire [64:0] \$2 ;
  wire [64:0] \$3 ;
  wire [64:0] \$4 ;
  wire [64:0] \$5 ;
  wire [64:0] \$6 ;
  reg [1:0] \$7 ;
  reg [63:0] \$8 ;
  wire [11:0] amdemod_out;
  wire [11:0] \amdemod_out$62 ;
  wire antenna_0__rf_in__i;
  input antenna_0__rf_in__io;
  wire antenna_0__rf_in__io;
  wire cic_cosine_clk;
  wire [71:0] cic_cosine_out;
  (* init = 2'h0 *)
  wire [1:0] cic_gain;
  wire cic_sine_clk;
  wire [71:0] cic_sine_out;
  wire clk;
  input clk25_0__io;
  wire clk25_0__io;
  wire clk_80mhz;
  wire [3:0] clocks;
  wire [11:0] cosinewave;
  wire [11:0] cosinewave_in;
  wire [11:0] cosinewave_out;
  wire data_clk;
  wire \data_clk$57 ;
  wire [11:0] data_in;
  wire [11:0] \data_in$53 ;
  wire [11:0] \data_in$63 ;
  wire [11:0] data_out;
  wire [11:0] \data_out$55 ;
  wire diff_out;
  wire enable;
  reg [1:0] gain = 2'h0;
  (* init = 2'h0 *)
  wire [1:0] \gain$52 ;
  wire i_Rx_Serial;
  wire [11:0] inphase;
  output led_0__io;
  wire led_0__io;
  wire led_0__o;
  output led_1__io;
  wire led_1__io;
  wire led_1__o;
  output led_2__io;
  wire led_2__io;
  wire led_2__o;
  output led_3__io;
  wire led_3__io;
  wire led_3__o;
  output led_4__io;
  wire led_4__io;
  wire led_4__o;
  output led_5__io;
  wire led_5__io;
  wire led_5__o;
  output led_6__io;
  wire led_6__io;
  wire led_6__o;
  output led_7__io;
  wire led_7__io;
  wire led_7__o;
  wire [11:0] lo_cosinewave;
  wire [11:0] lo_sinewave;
  wire [11:0] mix_cosinewave;
  wire [11:0] mix_sinewave;
  wire [7:0] o_Rx_Byte;
  wire o_Rx_DV;
  reg [63:0] phase_increment = 64'h0000000000000000;
  (* init = 64'h0000000000000000 *)
  wire [63:0] \phase_increment$29 ;
  wire pll80_clk;
  wire pll80_rst;
  output pwm_0__pwm_out__io;
  wire pwm_0__pwm_out__io;
  wire pwm_0__pwm_out__o;
  output pwm_0__pwm_out_n1__io;
  wire pwm_0__pwm_out_n1__io;
  wire pwm_0__pwm_out_n1__o;
  output pwm_0__pwm_out_n2__io;
  wire pwm_0__pwm_out_n2__io;
  wire pwm_0__pwm_out_n2__o;
  output pwm_0__pwm_out_n3__io;
  wire pwm_0__pwm_out_n3__io;
  wire pwm_0__pwm_out_n3__o;
  output pwm_0__pwm_out_n4__io;
  wire pwm_0__pwm_out_n4__io;
  wire pwm_0__pwm_out_n4__o;
  output pwm_0__pwm_out_p1__io;
  wire pwm_0__pwm_out_p1__io;
  wire pwm_0__pwm_out_p1__o;
  output pwm_0__pwm_out_p2__io;
  wire pwm_0__pwm_out_p2__io;
  wire pwm_0__pwm_out_p2__o;
  output pwm_0__pwm_out_p3__io;
  wire pwm_0__pwm_out_p3__io;
  wire pwm_0__pwm_out_p3__o;
  output pwm_0__pwm_out_p4__io;
  wire pwm_0__pwm_out_p4__io;
  wire pwm_0__pwm_out_p4__o;
  wire pwm_out;
  wire \pwm_out$65 ;
  wire [3:0] pwm_out_n;
  wire [3:0] pwm_out_p;
  wire [11:0] quadrature;
  wire rf_in;
  wire \rf_in$35 ;
  wire rf_out;
  wire rst;
  wire [7:0] rx_byte;
  wire rx_data_valid;
  wire rx_serial;
  wire sample_clock_ce;
  wire [11:0] sinewave;
  wire [11:0] sinewave_in;
  wire [11:0] sinewave_out;
  input uart_0__dtr__io;
  wire uart_0__dtr__io;
  input uart_0__rts__io;
  wire uart_0__rts__io;
  wire uart_0__rx__i;
  input uart_0__rx__io;
  wire uart_0__rx__io;
  output uart_0__tx__io;
  wire uart_0__tx__io;
  assign pwm_0__pwm_out_n2__o = ~ pwm_out;
  assign pwm_0__pwm_out_n3__o = ~ pwm_out;
  assign pwm_0__pwm_out_n4__o = ~ pwm_out;
  assign \$1  = $signed(phase_increment) - $signed(52'h71b375868d170);
  assign \$2  = $signed(phase_increment) + $signed(52'h71b375868d170);
  assign \$3  = $signed(phase_increment) - $signed(46'h1436a8cdf6f3);
  assign \$4  = $signed(phase_increment) + $signed(46'h1436a8cdf6f3);
  assign \$5  = $signed(phase_increment) - $signed(49'h0ca22980ba57e);
  assign \$6  = $signed(phase_increment) + $signed(49'h0ca22980ba57e);
  always @(posedge clocks[0])
    gain <= \$7 ;
  always @(posedge clocks[0])
    phase_increment <= \$8 ;
  assign pwm_0__pwm_out_n1__o = ~ pwm_out;
  \top.amdemod  amdemod (
    .amdemod_d(amdemod_out),
    .enable(cic_sine_clk),
    .inphase(data_out),
    .pll80_clk(clocks[0]),
    .quadrature(\data_out$55 )
  );
  \top.cd_sync  cd_sync (
    .clk(clk),
    .clk25_0__io(clk25_0__io)
  );
  \top.cic_cosine  cic_cosine (
    .data_clk(cic_cosine_clk),
    .data_in(mix_cosinewave),
    .data_out(\data_out$55 ),
    .gain(gain),
    .pll80_clk(clocks[0])
  );
  \top.cic_sine  cic_sine (
    .data_clk(cic_sine_clk),
    .data_in(mix_sinewave),
    .data_out(data_out),
    .gain(gain),
    .pll80_clk(clocks[0])
  );
  ecp5pll #(
    .in_hz(32'd25000000),
    .out0_hz(32'd80000000)
  ) ecp5pll (
    .clk_i(clk),
    .clk_o(clocks)
  );
  \top.mixer  mixer (
    .cosinewave_in(lo_cosinewave),
    .cosinewave_out(mix_cosinewave),
    .pll80_clk(clocks[0]),
    .rf_in(rf_in),
    .rf_in_d_1(diff_out),
    .sinewave_in(lo_sinewave),
    .sinewave_out(mix_sinewave)
  );
  \top.pin_antenna_0__rf_in  pin_antenna_0__rf_in (
    .antenna_0__rf_in__i(rf_in),
    .antenna_0__rf_in__io(antenna_0__rf_in__io)
  );
  \top.pin_led_0  pin_led_0 (
    .led_0__io(led_0__io),
    .o(rx_byte[0])
  );
  \top.pin_led_1  pin_led_1 (
    .led_1__io(led_1__io),
    .o(rx_byte[1])
  );
  \top.pin_led_2  pin_led_2 (
    .led_2__io(led_2__io),
    .o(rx_byte[2])
  );
  \top.pin_led_3  pin_led_3 (
    .led_3__io(led_3__io),
    .o(rx_byte[3])
  );
  \top.pin_led_4  pin_led_4 (
    .led_4__io(led_4__io),
    .o(rx_byte[4])
  );
  \top.pin_led_5  pin_led_5 (
    .led_5__io(led_5__io),
    .o(rx_byte[5])
  );
  \top.pin_led_6  pin_led_6 (
    .led_6__io(led_6__io),
    .o(rx_byte[6])
  );
  \top.pin_led_7  pin_led_7 (
    .led_7__io(led_7__io),
    .o(rx_byte[7])
  );
  \top.pin_pwm_0__pwm_out  pin_pwm_0__pwm_out (
    .o(pwm_out),
    .pwm_0__pwm_out__io(pwm_0__pwm_out__io)
  );
  \top.pin_pwm_0__pwm_out_n1  pin_pwm_0__pwm_out_n1 (
    .o(pwm_0__pwm_out_n1__o),
    .pwm_0__pwm_out_n1__io(pwm_0__pwm_out_n1__io)
  );
  \top.pin_pwm_0__pwm_out_n2  pin_pwm_0__pwm_out_n2 (
    .o(pwm_0__pwm_out_n2__o),
    .pwm_0__pwm_out_n2__io(pwm_0__pwm_out_n2__io)
  );
  \top.pin_pwm_0__pwm_out_n3  pin_pwm_0__pwm_out_n3 (
    .o(pwm_0__pwm_out_n3__o),
    .pwm_0__pwm_out_n3__io(pwm_0__pwm_out_n3__io)
  );
  \top.pin_pwm_0__pwm_out_n4  pin_pwm_0__pwm_out_n4 (
    .o(pwm_0__pwm_out_n4__o),
    .pwm_0__pwm_out_n4__io(pwm_0__pwm_out_n4__io)
  );
  \top.pin_pwm_0__pwm_out_p1  pin_pwm_0__pwm_out_p1 (
    .o(pwm_out),
    .pwm_0__pwm_out_p1__io(pwm_0__pwm_out_p1__io)
  );
  \top.pin_pwm_0__pwm_out_p2  pin_pwm_0__pwm_out_p2 (
    .o(pwm_out),
    .pwm_0__pwm_out_p2__io(pwm_0__pwm_out_p2__io)
  );
  \top.pin_pwm_0__pwm_out_p3  pin_pwm_0__pwm_out_p3 (
    .o(pwm_out),
    .pwm_0__pwm_out_p3__io(pwm_0__pwm_out_p3__io)
  );
  \top.pin_pwm_0__pwm_out_p4  pin_pwm_0__pwm_out_p4 (
    .o(pwm_out),
    .pwm_0__pwm_out_p4__io(pwm_0__pwm_out_p4__io)
  );
  \top.pin_uart_0__dtr  pin_uart_0__dtr (
    .uart_0__dtr__io(uart_0__dtr__io)
  );
  \top.pin_uart_0__rts  pin_uart_0__rts (
    .uart_0__rts__io(uart_0__rts__io)
  );
  \top.pin_uart_0__rx  pin_uart_0__rx (
    .uart_0__rx__i(i_Rx_Serial),
    .uart_0__rx__io(uart_0__rx__io)
  );
  \top.pin_uart_0__tx  pin_uart_0__tx (
    .uart_0__tx__io(uart_0__tx__io)
  );
  \top.pwm  pwm (
    .data_in(amdemod_out),
    .pll80_clk(clocks[0]),
    .pwm_out(pwm_out)
  );
  \top.sine_cosine_generator  sine_cosine_generator (
    .cosinewave(lo_cosinewave),
    .phase_increment(phase_increment),
    .pll80_clk(clocks[0]),
    .sinewave(lo_sinewave)
  );
  \top.uart_rx  uart_rx (
    .i_Rx_Serial(i_Rx_Serial),
    .o_Rx_Byte(rx_byte),
    .o_Rx_DV(rx_data_valid),
    .pll80_clk(clocks[0])
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$7  = gain;
    if (rx_data_valid) begin
      (* full_case = 32'd1 *)
      casez (rx_byte)
        8'h30:
            \$7  = 2'h0;
        8'h31:
            \$7  = 2'h1;
        8'h32:
            \$7  = 2'h2;
        8'h33:
            \$7  = 2'h3;
        default:
            \$7  = 2'h0;
      endcase
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$8  = phase_increment;
    if (rx_data_valid) begin
      (* full_case = 32'd1 *)
      casez (rx_byte)
        8'h61:
            \$8  = 64'h02c6a19e88f1cfe2;
        8'h62:
            \$8  = 64'h01aa60f8b8911654;
        8'h66:
            \$8  = 64'h1dc38c076704516d;
        8'h67:
            \$8  = 64'h1d60d923295482c6;
        8'h6e:
            \$8  = \$1 [63:0];
        8'h6d:
            \$8  = \$2 [63:0];
        8'h6f:
            \$8  = \$3 [63:0];
        8'h70:
            \$8  = \$4 [63:0];
        8'h71:
            \$8  = \$5 [63:0];
        8'h68:
            \$8  = \$6 [63:0];
        default:
            \$8  = 64'h0000000000000000;
      endcase
    end
  end
  assign clk_80mhz = clocks[0];
  assign pll80_clk = clocks[0];
  assign sample_clock_ce = 1'h1;
  assign rst = 1'h0;
  assign \phase_increment$29  = phase_increment;
  assign sinewave = lo_sinewave;
  assign cosinewave = lo_cosinewave;
  assign \rf_in$35  = rf_in;
  assign sinewave_in = lo_sinewave;
  assign cosinewave_in = lo_cosinewave;
  assign rf_out = diff_out;
  assign sinewave_out = mix_sinewave;
  assign cosinewave_out = mix_cosinewave;
  assign antenna_0__rf_in__i = rf_in;
  assign cic_gain = gain;
  assign data_in = mix_sinewave;
  assign cic_sine_out = { data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out[11], data_out };
  assign data_clk = cic_sine_clk;
  assign \gain$52  = gain;
  assign \data_in$53  = mix_cosinewave;
  assign cic_cosine_out = { \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55 [11], \data_out$55  };
  assign \data_clk$57  = cic_cosine_clk;
  assign enable = cic_sine_clk;
  assign inphase = data_out;
  assign quadrature = \data_out$55 ;
  assign \amdemod_out$62  = amdemod_out;
  assign \data_in$63  = amdemod_out;
  assign \pwm_out$65  = pwm_out;
  assign pwm_out_p = { pwm_out, pwm_out, pwm_out, pwm_out };
  assign pwm_out_n = { pwm_0__pwm_out_n4__o, pwm_0__pwm_out_n3__o, pwm_0__pwm_out_n2__o, pwm_0__pwm_out_n1__o };
  assign pwm_0__pwm_out_p1__o = pwm_out;
  assign pwm_0__pwm_out_p2__o = pwm_out;
  assign pwm_0__pwm_out_p3__o = pwm_out;
  assign pwm_0__pwm_out_p4__o = pwm_out;
  assign pwm_0__pwm_out__o = pwm_out;
  assign rx_serial = i_Rx_Serial;
  assign o_Rx_DV = rx_data_valid;
  assign o_Rx_Byte = rx_byte;
  assign uart_0__rx__i = i_Rx_Serial;
  assign led_0__o = rx_byte[0];
  assign led_1__o = rx_byte[1];
  assign led_2__o = rx_byte[2];
  assign led_3__o = rx_byte[3];
  assign led_4__o = rx_byte[4];
  assign led_5__o = rx_byte[5];
  assign led_6__o = rx_byte[6];
  assign led_7__o = rx_byte[7];
  assign pll80_rst = 1'h0;
endmodule

module \top.amdemod (enable, inphase, quadrature, amdemod_d, pll80_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$2  = 0;
  wire [23:0] \$1 ;
  wire \$10 ;
  wire \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire [23:0] \$2 ;
  wire \$20 ;
  wire [24:0] \$3 ;
  reg [23:0] \$4 ;
  reg [23:0] \$5 ;
  reg [24:0] \$6 ;
  reg [11:0] \$7 ;
  wire \$8 ;
  wire \$9 ;
  output [11:0] amdemod_d;
  reg [11:0] amdemod_d = 12'h000;
  (* init = 12'h000 *)
  wire [11:0] amdemod_out;
  input enable;
  wire enable;
  input [11:0] inphase;
  wire [11:0] inphase;
  reg [23:0] mult_result_i = 24'h000000;
  reg [23:0] mult_result_q = 24'h000000;
  wire [25:0] num;
  input pll80_clk;
  wire pll80_clk;
  wire pll80_rst;
  input [11:0] quadrature;
  wire [11:0] quadrature;
  wire [12:0] result;
  reg [24:0] square_sum = 25'h0000000;
  assign \$1  = $signed(inphase) * $signed(inphase);
  assign \$2  = $signed(quadrature) * $signed(quadrature);
  assign \$3  = $signed(mult_result_i) + $signed(mult_result_q);
  always @(posedge pll80_clk)
    mult_result_i <= \$4 ;
  always @(posedge pll80_clk)
    mult_result_q <= \$5 ;
  always @(posedge pll80_clk)
    square_sum <= \$6 ;
  always @(posedge pll80_clk)
    amdemod_d <= \$7 ;
  \top.amdemod.sqrt  sqrt (
    .\port$102$0 (\$9 ),
    .\port$108$0 (\$10 ),
    .\port$114$0 (\$11 ),
    .\port$120$0 (\$12 ),
    .\port$126$0 (\$13 ),
    .\port$132$0 (\$14 ),
    .\port$138$0 (\$15 ),
    .\port$144$0 (\$16 ),
    .\port$150$0 (\$17 ),
    .\port$156$0 (\$18 ),
    .\port$162$0 (\$19 ),
    .\port$168$0 (\$20 ),
    .\port$400$0 (square_sum),
    .\port$96$0 (\$8 )
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$4  = mult_result_i;
    if (enable) begin
      \$4  = \$1 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$5  = mult_result_q;
    if (enable) begin
      \$5  = \$2 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$6  = square_sum;
    if (enable) begin
      \$6  = \$3 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$2 ) begin end
    \$7  = amdemod_d;
    if (enable) begin
      \$7  = { \$9 , \$10 , \$11 , \$12 , \$13 , \$14 , \$15 , \$16 , \$17 , \$18 , \$19 , \$20  };
    end
  end
  assign pll80_rst = 1'h0;
  assign result = { \$8 , \$9 , \$10 , \$11 , \$12 , \$13 , \$14 , \$15 , \$16 , \$17 , \$18 , \$19 , \$20  };
  assign num = { square_sum[24], square_sum };
  assign amdemod_out = amdemod_d;
endmodule

module \top.amdemod.sqrt (\port$102$0 , \port$108$0 , \port$114$0 , \port$120$0 , \port$126$0 , \port$132$0 , \port$138$0 , \port$144$0 , \port$150$0 , \port$156$0 , \port$162$0 , \port$168$0 , \port$400$0 , \port$96$0 );
  reg \$auto$verilog_backend.cc:2352:dump_module$3  = 0;
  wire \$1 ;
  wire [15:0] \$10 ;
  wire [15:0] \$11 ;
  wire \$12 ;
  wire \$13 ;
  wire [15:0] \$14 ;
  wire [15:0] \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire [15:0] \$18 ;
  wire [15:0] \$19 ;
  wire [15:0] \$2 ;
  wire \$20 ;
  wire \$21 ;
  wire [15:0] \$22 ;
  wire [15:0] \$23 ;
  wire \$24 ;
  wire \$25 ;
  wire [15:0] \$26 ;
  wire [15:0] \$27 ;
  wire \$28 ;
  wire \$29 ;
  wire [15:0] \$3 ;
  wire [15:0] \$30 ;
  wire [15:0] \$31 ;
  wire \$32 ;
  wire \$33 ;
  wire [15:0] \$34 ;
  wire [15:0] \$35 ;
  wire \$36 ;
  wire \$37 ;
  wire [15:0] \$38 ;
  wire [15:0] \$39 ;
  wire \$4 ;
  wire \$40 ;
  wire \$41 ;
  wire [15:0] \$42 ;
  wire [15:0] \$43 ;
  wire \$44 ;
  wire \$45 ;
  wire [15:0] \$46 ;
  wire [15:0] \$47 ;
  wire \$48 ;
  wire \$49 ;
  wire \$5 ;
  wire [15:0] \$50 ;
  wire [15:0] \$51 ;
  wire \$52 ;
  wire [15:0] \$6 ;
  wire [15:0] \$7 ;
  wire \$8 ;
  wire \$9 ;
  wire [25:0] \$signal ;
  wire [14:0] \$signal$10 ;
  wire [25:0] \$signal$11 ;
  reg [14:0] \$signal$12 ;
  wire [12:0] \$signal$13 ;
  wire [14:0] \$signal$14 ;
  wire [14:0] \$signal$15 ;
  wire [25:0] \$signal$16 ;
  reg [14:0] \$signal$17 ;
  wire [12:0] \$signal$18 ;
  wire [14:0] \$signal$19 ;
  wire [12:0] \$signal$2 ;
  wire [14:0] \$signal$20 ;
  wire [25:0] \$signal$21 ;
  reg [14:0] \$signal$22 ;
  wire [12:0] \$signal$23 ;
  wire [14:0] \$signal$24 ;
  wire [14:0] \$signal$25 ;
  wire [25:0] \$signal$26 ;
  reg [14:0] \$signal$27 ;
  wire [12:0] \$signal$28 ;
  wire [14:0] \$signal$29 ;
  wire [14:0] \$signal$3 ;
  wire [14:0] \$signal$30 ;
  wire [25:0] \$signal$31 ;
  reg [14:0] \$signal$32 ;
  wire [12:0] \$signal$33 ;
  wire [14:0] \$signal$34 ;
  wire [14:0] \$signal$35 ;
  wire [25:0] \$signal$36 ;
  reg [14:0] \$signal$37 ;
  wire [12:0] \$signal$38 ;
  wire [14:0] \$signal$39 ;
  wire [14:0] \$signal$4 ;
  wire [14:0] \$signal$40 ;
  wire [25:0] \$signal$41 ;
  reg [14:0] \$signal$42 ;
  wire [12:0] \$signal$43 ;
  wire [14:0] \$signal$44 ;
  wire [14:0] \$signal$45 ;
  wire [25:0] \$signal$46 ;
  reg [14:0] \$signal$47 ;
  wire [12:0] \$signal$48 ;
  wire [14:0] \$signal$49 ;
  wire [14:0] \$signal$5 ;
  wire [14:0] \$signal$50 ;
  wire [25:0] \$signal$51 ;
  reg [14:0] \$signal$52 ;
  wire [12:0] \$signal$53 ;
  wire [14:0] \$signal$54 ;
  wire [14:0] \$signal$55 ;
  wire [25:0] \$signal$56 ;
  reg [14:0] \$signal$57 ;
  wire [12:0] \$signal$58 ;
  wire [14:0] \$signal$59 ;
  wire [25:0] \$signal$6 ;
  wire [14:0] \$signal$60 ;
  wire [25:0] \$signal$61 ;
  reg [14:0] \$signal$62 ;
  wire [12:0] \$signal$63 ;
  wire [14:0] \$signal$64 ;
  wire [14:0] \$signal$65 ;
  wire [25:0] \$signal$66 ;
  reg [14:0] \$signal$67 ;
  wire [12:0] \$signal$68 ;
  reg [14:0] \$signal$7 ;
  wire [12:0] \$signal$8 ;
  wire [14:0] \$signal$9 ;
  wire [25:0] num;
  output \port$102$0 ;
  wire \port$102$0 ;
  output \port$108$0 ;
  wire \port$108$0 ;
  output \port$114$0 ;
  wire \port$114$0 ;
  output \port$120$0 ;
  wire \port$120$0 ;
  output \port$126$0 ;
  wire \port$126$0 ;
  output \port$132$0 ;
  wire \port$132$0 ;
  output \port$138$0 ;
  wire \port$138$0 ;
  output \port$144$0 ;
  wire \port$144$0 ;
  output \port$150$0 ;
  wire \port$150$0 ;
  output \port$156$0 ;
  wire \port$156$0 ;
  output \port$162$0 ;
  wire \port$162$0 ;
  output \port$168$0 ;
  wire \port$168$0 ;
  input [24:0] \port$400$0 ;
  wire [24:0] \port$400$0 ;
  output \port$96$0 ;
  wire \port$96$0 ;
  wire [12:0] result;
  assign \$48  = ~ \$signal$62 [14];
  assign \$50  = { \$signal$62 [12:0], \port$400$0 [1:0] } + { \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36 , \$40 , \$44 , \$48 , \$signal$62 [14], 1'h1 };
  assign \$51  = { \$signal$62 [12:0], \port$400$0 [1:0] } - { \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36 , \$40 , \$44 , \$48 , \$signal$62 [14], 1'h1 };
  assign \$52  = ~ \$signal$67 [14];
  assign \$2  = { \port$400$0 [24], \port$400$0 [24] } + 1'h1;
  assign \$3  = { \port$400$0 [24], \port$400$0 [24] } - 1'h1;
  assign \$4  = ~ \$signal$7 [14];
  assign \$6  = { \$signal$7 [12:0], \port$400$0 [23:22] } + { \$4 , \$signal$7 [14], 1'h1 };
  assign \$7  = { \$signal$7 [12:0], \port$400$0 [23:22] } - { \$4 , \$signal$7 [14], 1'h1 };
  assign \$8  = ~ \$signal$12 [14];
  assign \$10  = { \$signal$12 [12:0], \port$400$0 [21:20] } + { \$4 , \$8 , \$signal$12 [14], 1'h1 };
  assign \$11  = { \$signal$12 [12:0], \port$400$0 [21:20] } - { \$4 , \$8 , \$signal$12 [14], 1'h1 };
  assign \$12  = ~ \$signal$17 [14];
  assign \$14  = { \$signal$17 [12:0], \port$400$0 [19:18] } + { \$4 , \$8 , \$12 , \$signal$17 [14], 1'h1 };
  assign \$15  = { \$signal$17 [12:0], \port$400$0 [19:18] } - { \$4 , \$8 , \$12 , \$signal$17 [14], 1'h1 };
  assign \$16  = ~ \$signal$22 [14];
  assign \$18  = { \$signal$22 [12:0], \port$400$0 [17:16] } + { \$4 , \$8 , \$12 , \$16 , \$signal$22 [14], 1'h1 };
  assign \$19  = { \$signal$22 [12:0], \port$400$0 [17:16] } - { \$4 , \$8 , \$12 , \$16 , \$signal$22 [14], 1'h1 };
  assign \$20  = ~ \$signal$27 [14];
  assign \$22  = { \$signal$27 [12:0], \port$400$0 [15:14] } + { \$4 , \$8 , \$12 , \$16 , \$20 , \$signal$27 [14], 1'h1 };
  assign \$23  = { \$signal$27 [12:0], \port$400$0 [15:14] } - { \$4 , \$8 , \$12 , \$16 , \$20 , \$signal$27 [14], 1'h1 };
  assign \$24  = ~ \$signal$32 [14];
  assign \$26  = { \$signal$32 [12:0], \port$400$0 [13:12] } + { \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$signal$32 [14], 1'h1 };
  assign \$27  = { \$signal$32 [12:0], \port$400$0 [13:12] } - { \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$signal$32 [14], 1'h1 };
  assign \$28  = ~ \$signal$37 [14];
  assign \$30  = { \$signal$37 [12:0], \port$400$0 [11:10] } + { \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$signal$37 [14], 1'h1 };
  assign \$31  = { \$signal$37 [12:0], \port$400$0 [11:10] } - { \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$signal$37 [14], 1'h1 };
  assign \$32  = ~ \$signal$42 [14];
  assign \$34  = { \$signal$42 [12:0], \port$400$0 [9:8] } + { \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$signal$42 [14], 1'h1 };
  assign \$35  = { \$signal$42 [12:0], \port$400$0 [9:8] } - { \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$signal$42 [14], 1'h1 };
  assign \$36  = ~ \$signal$47 [14];
  assign \$38  = { \$signal$47 [12:0], \port$400$0 [7:6] } + { \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36 , \$signal$47 [14], 1'h1 };
  assign \$39  = { \$signal$47 [12:0], \port$400$0 [7:6] } - { \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36 , \$signal$47 [14], 1'h1 };
  assign \$40  = ~ \$signal$52 [14];
  assign \$42  = { \$signal$52 [12:0], \port$400$0 [5:4] } + { \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36 , \$40 , \$signal$52 [14], 1'h1 };
  assign \$43  = { \$signal$52 [12:0], \port$400$0 [5:4] } - { \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36 , \$40 , \$signal$52 [14], 1'h1 };
  assign \$44  = ~ \$signal$57 [14];
  assign \$46  = { \$signal$57 [12:0], \port$400$0 [3:2] } + { \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36 , \$40 , \$44 , \$signal$57 [14], 1'h1 };
  assign \$47  = { \$signal$57 [12:0], \port$400$0 [3:2] } - { \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36 , \$40 , \$44 , \$signal$57 [14], 1'h1 };
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (\$1 ) begin
      \$signal$7  = \$2 [14:0];
    end else begin
      \$signal$7  = \$3 [14:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (\$5 ) begin
      \$signal$12  = \$6 [14:0];
    end else begin
      \$signal$12  = \$7 [14:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (\$9 ) begin
      \$signal$17  = \$10 [14:0];
    end else begin
      \$signal$17  = \$11 [14:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (\$13 ) begin
      \$signal$22  = \$14 [14:0];
    end else begin
      \$signal$22  = \$15 [14:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (\$17 ) begin
      \$signal$27  = \$18 [14:0];
    end else begin
      \$signal$27  = \$19 [14:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (\$21 ) begin
      \$signal$32  = \$22 [14:0];
    end else begin
      \$signal$32  = \$23 [14:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (\$25 ) begin
      \$signal$37  = \$26 [14:0];
    end else begin
      \$signal$37  = \$27 [14:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (\$29 ) begin
      \$signal$42  = \$30 [14:0];
    end else begin
      \$signal$42  = \$31 [14:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (\$33 ) begin
      \$signal$47  = \$34 [14:0];
    end else begin
      \$signal$47  = \$35 [14:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (\$37 ) begin
      \$signal$52  = \$38 [14:0];
    end else begin
      \$signal$52  = \$39 [14:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (\$41 ) begin
      \$signal$57  = \$42 [14:0];
    end else begin
      \$signal$57  = \$43 [14:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (\$45 ) begin
      \$signal$62  = \$46 [14:0];
    end else begin
      \$signal$62  = \$47 [14:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (\$49 ) begin
      \$signal$67  = \$50 [14:0];
    end else begin
      \$signal$67  = \$51 [14:0];
    end
  end
  assign \$signal  = { \port$400$0 [24], \port$400$0  };
  assign num = { \port$400$0 [24], \port$400$0  };
  assign \$signal$2  = 13'h0000;
  assign \$signal$3  = 15'h0000;
  assign \$signal$4  = 15'h0001;
  assign \$signal$5  = { 13'h0000, \port$400$0 [24], \port$400$0 [24] };
  assign \$signal$6  = { \port$400$0 [23:0], 2'h0 };
  assign \$signal$8  = { 12'h000, \$4  };
  assign \$signal$9  = { 12'h000, \$4 , \$signal$7 [14], 1'h1 };
  assign \$signal$10  = { \$signal$7 [12:0], \port$400$0 [23:22] };
  assign \$signal$11  = { \port$400$0 [21:0], 4'h0 };
  assign \$signal$13  = { 11'h000, \$4 , \$8  };
  assign \$signal$14  = { 11'h000, \$4 , \$8 , \$signal$12 [14], 1'h1 };
  assign \$signal$15  = { \$signal$12 [12:0], \port$400$0 [21:20] };
  assign \$signal$16  = { \port$400$0 [19:0], 6'h00 };
  assign \$signal$18  = { 10'h000, \$4 , \$8 , \$12  };
  assign \$signal$19  = { 10'h000, \$4 , \$8 , \$12 , \$signal$17 [14], 1'h1 };
  assign \$signal$20  = { \$signal$17 [12:0], \port$400$0 [19:18] };
  assign \$signal$21  = { \port$400$0 [17:0], 8'h00 };
  assign \$signal$23  = { 9'h000, \$4 , \$8 , \$12 , \$16  };
  assign \$signal$24  = { 9'h000, \$4 , \$8 , \$12 , \$16 , \$signal$22 [14], 1'h1 };
  assign \$signal$25  = { \$signal$22 [12:0], \port$400$0 [17:16] };
  assign \$signal$26  = { \port$400$0 [15:0], 10'h000 };
  assign \$signal$28  = { 8'h00, \$4 , \$8 , \$12 , \$16 , \$20  };
  assign \$signal$29  = { 8'h00, \$4 , \$8 , \$12 , \$16 , \$20 , \$signal$27 [14], 1'h1 };
  assign \$signal$30  = { \$signal$27 [12:0], \port$400$0 [15:14] };
  assign \$signal$31  = { \port$400$0 [13:0], 12'h000 };
  assign \$signal$33  = { 7'h00, \$4 , \$8 , \$12 , \$16 , \$20 , \$24  };
  assign \$signal$34  = { 7'h00, \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$signal$32 [14], 1'h1 };
  assign \$signal$35  = { \$signal$32 [12:0], \port$400$0 [13:12] };
  assign \$signal$36  = { \port$400$0 [11:0], 14'h0000 };
  assign \$signal$38  = { 6'h00, \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28  };
  assign \$signal$39  = { 6'h00, \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$signal$37 [14], 1'h1 };
  assign \$signal$40  = { \$signal$37 [12:0], \port$400$0 [11:10] };
  assign \$signal$41  = { \port$400$0 [9:0], 16'h0000 };
  assign \$signal$43  = { 5'h00, \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32  };
  assign \$signal$44  = { 5'h00, \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$signal$42 [14], 1'h1 };
  assign \$signal$45  = { \$signal$42 [12:0], \port$400$0 [9:8] };
  assign \$signal$46  = { \port$400$0 [7:0], 18'h00000 };
  assign \$signal$48  = { 4'h0, \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36  };
  assign \$signal$49  = { 4'h0, \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36 , \$signal$47 [14], 1'h1 };
  assign \$signal$50  = { \$signal$47 [12:0], \port$400$0 [7:6] };
  assign \$signal$51  = { \port$400$0 [5:0], 20'h00000 };
  assign \$signal$53  = { 3'h0, \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36 , \$40  };
  assign \$signal$54  = { 3'h0, \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36 , \$40 , \$signal$52 [14], 1'h1 };
  assign \$signal$55  = { \$signal$52 [12:0], \port$400$0 [5:4] };
  assign \$signal$56  = { \port$400$0 [3:0], 22'h000000 };
  assign \$signal$58  = { 2'h0, \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36 , \$40 , \$44  };
  assign \$signal$59  = { 2'h0, \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36 , \$40 , \$44 , \$signal$57 [14], 1'h1 };
  assign \$signal$60  = { \$signal$57 [12:0], \port$400$0 [3:2] };
  assign \$signal$61  = { \port$400$0 [1:0], 24'h000000 };
  assign \$signal$63  = { 1'h0, \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36 , \$40 , \$44 , \$48  };
  assign \$signal$64  = { 1'h0, \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36 , \$40 , \$44 , \$48 , \$signal$62 [14], 1'h1 };
  assign \$signal$65  = { \$signal$62 [12:0], \port$400$0 [1:0] };
  assign \$signal$66  = 26'h0000000;
  assign \$signal$68  = { \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36 , \$40 , \$44 , \$48 , \$52  };
  assign result = { \$4 , \$8 , \$12 , \$16 , \$20 , \$24 , \$28 , \$32 , \$36 , \$40 , \$44 , \$48 , \$52  };
  assign \port$96$0  = \$4 ;
  assign \port$102$0  = \$8 ;
  assign \port$108$0  = \$12 ;
  assign \port$114$0  = \$16 ;
  assign \port$120$0  = \$20 ;
  assign \port$126$0  = \$24 ;
  assign \port$132$0  = \$28 ;
  assign \port$138$0  = \$32 ;
  assign \port$144$0  = \$36 ;
  assign \port$150$0  = \$40 ;
  assign \port$156$0  = \$44 ;
  assign \port$162$0  = \$48 ;
  assign \port$168$0  = \$52 ;
  assign \$1  = 1'h0;
  assign \$5  = \$signal$7 [14];
  assign \$9  = \$signal$12 [14];
  assign \$13  = \$signal$17 [14];
  assign \$17  = \$signal$22 [14];
  assign \$21  = \$signal$27 [14];
  assign \$25  = \$signal$32 [14];
  assign \$29  = \$signal$37 [14];
  assign \$33  = \$signal$42 [14];
  assign \$37  = \$signal$47 [14];
  assign \$41  = \$signal$52 [14];
  assign \$45  = \$signal$57 [14];
  assign \$49  = \$signal$62 [14];
endmodule

module \top.cd_sync (clk25_0__io, clk);
  wire \$1 ;
  output clk;
  wire clk;
  input clk25_0__io;
  wire clk25_0__io;
  wire gsr0;
  wire gsr1;
  wire i;
  FD1S3AX #(
    .GSR("DISABLED")
  ) \U$1  (
    .CK(clk),
    .D(1'h1),
    .Q(gsr0)
  );
  FD1S3AX #(
    .GSR("DISABLED")
  ) \U$2  (
    .CK(clk),
    .D(gsr0),
    .Q(gsr1)
  );
  SGSR \U$3  (
    .CLK(clk),
    .GSR(gsr1)
  );
  \top.cd_sync.clk_buf  clk_buf (
    .clk25_0__io(clk25_0__io),
    .i(clk)
  );
  assign i = clk;
  assign \$1  = 1'h1;
endmodule

module \top.cd_sync.clk_buf (clk25_0__io, i);
  input clk25_0__io;
  wire clk25_0__io;
  output i;
  wire i;
  wire \i$1 ;
  \top.cd_sync.clk_buf.buf  \buf  (
    .clk25_0__io(clk25_0__io),
    .i(\i$1 )
  );
  assign i = \i$1 ;
endmodule

module \top.cd_sync.clk_buf.buf (clk25_0__io, i);
  input clk25_0__io;
  wire clk25_0__io;
  output i;
  wire i;
  IB buf0 (
    .I(clk25_0__io),
    .O(i)
  );
endmodule

module \top.cic_cosine (gain, data_in, data_clk, data_out, pll80_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$4  = 0;
  wire [72:0] \$1 ;
  wire [72:0] \$10 ;
  wire [72:0] \$11 ;
  wire [72:0] \$12 ;
  wire [72:0] \$13 ;
  wire [72:0] \$14 ;
  wire [6:0] \$15 ;
  wire [71:0] \$16 ;
  wire [71:0] \$17 ;
  wire [71:0] \$18 ;
  wire [71:0] \$19 ;
  wire [72:0] \$2 ;
  wire [71:0] \$20 ;
  wire [71:0] \$21 ;
  reg [11:0] \$22 ;
  reg [71:0] \$23 ;
  reg \$24 ;
  reg \$25 ;
  wire \$26 ;
  reg [71:0] \$27 ;
  reg [71:0] \$28 ;
  reg [71:0] \$29 ;
  wire [72:0] \$3 ;
  reg [71:0] \$30 ;
  reg [71:0] \$31 ;
  reg [71:0] \$32 ;
  reg [71:0] \$33 ;
  reg [71:0] \$34 ;
  reg [71:0] \$35 ;
  reg [71:0] \$36 ;
  reg [11:0] \$37 ;
  wire [72:0] \$4 ;
  wire [72:0] \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire [12:0] \$8 ;
  wire [12:0] \$9 ;
  reg [71:0] comb10 = 72'h000000000000000000;
  reg [71:0] comb6 = 72'h000000000000000000;
  reg [71:0] comb7 = 72'h000000000000000000;
  reg [71:0] comb8 = 72'h000000000000000000;
  reg [71:0] comb9 = 72'h000000000000000000;
  reg [71:0] comb_d6 = 72'h000000000000000000;
  reg [71:0] comb_d7 = 72'h000000000000000000;
  reg [71:0] comb_d8 = 72'h000000000000000000;
  reg [71:0] comb_d9 = 72'h000000000000000000;
  reg [11:0] count = 12'h000;
  output data_clk;
  reg data_clk = 1'h0;
  input [11:0] data_in;
  wire [11:0] data_in;
  output [11:0] data_out;
  reg [11:0] data_out = 12'h000;
  reg decimation_clk = 1'h0;
  input [1:0] gain;
  wire [1:0] gain;
  reg [71:0] integrator1 = 72'h000000000000000000;
  reg [71:0] integrator2 = 72'h000000000000000000;
  reg [71:0] integrator3 = 72'h000000000000000000;
  reg [71:0] integrator4 = 72'h000000000000000000;
  reg [71:0] integrator5 = 72'h000000000000000000;
  reg [71:0] integrator_d_tmp = 72'h000000000000000000;
  reg [71:0] integrator_tmp = 72'h000000000000000000;
  input pll80_clk;
  wire pll80_clk;
  wire pll80_rst;
  reg valid_comb = 1'h0;
  assign \$1  = $signed(data_in) + $signed(integrator1);
  assign \$2  = $signed(integrator1) + $signed(integrator2);
  assign \$3  = $signed(integrator2) + $signed(integrator3);
  assign \$4  = $signed(integrator3) + $signed(integrator4);
  assign \$5  = $signed(integrator4) + $signed(integrator5);
  assign \$6  = count == 12'hfff;
  assign \$7  = count == 12'h800;
  assign \$8  = count + 1'h1;
  assign \$9  = count + 1'h1;
  assign \$10  = $signed(integrator_tmp) - $signed(integrator_d_tmp);
  assign \$11  = $signed(comb6) - $signed(comb_d6);
  assign \$12  = $signed(comb7) - $signed(comb_d7);
  assign \$13  = $signed(comb8) - $signed(comb_d8);
  assign \$14  = $signed(comb9) - $signed(comb_d9);
  assign \$15  = 6'h3c - gain;
  assign \$16  = $signed(comb10) >>> \$15 ;
  always @(posedge pll80_clk)
    integrator1 <= \$17 ;
  always @(posedge pll80_clk)
    integrator2 <= \$18 ;
  always @(posedge pll80_clk)
    integrator3 <= \$19 ;
  always @(posedge pll80_clk)
    integrator4 <= \$20 ;
  always @(posedge pll80_clk)
    integrator5 <= \$21 ;
  always @(posedge pll80_clk)
    count <= \$22 ;
  always @(posedge pll80_clk)
    integrator_tmp <= \$23 ;
  always @(posedge pll80_clk)
    decimation_clk <= \$24 ;
  always @(posedge pll80_clk)
    valid_comb <= \$25 ;
  always @(posedge pll80_clk)
    data_clk <= \$26 ;
  always @(posedge pll80_clk)
    integrator_d_tmp <= \$27 ;
  always @(posedge pll80_clk)
    comb6 <= \$28 ;
  always @(posedge pll80_clk)
    comb_d6 <= \$29 ;
  always @(posedge pll80_clk)
    comb7 <= \$30 ;
  always @(posedge pll80_clk)
    comb_d7 <= \$31 ;
  always @(posedge pll80_clk)
    comb8 <= \$32 ;
  always @(posedge pll80_clk)
    comb_d8 <= \$33 ;
  always @(posedge pll80_clk)
    comb9 <= \$34 ;
  always @(posedge pll80_clk)
    comb_d9 <= \$35 ;
  always @(posedge pll80_clk)
    comb10 <= \$36 ;
  always @(posedge pll80_clk)
    data_out <= \$37 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    (* full_case = 32'd1 *)
    if (\$6 ) begin
      \$22  = 12'h000;
    end else if (\$7 ) begin
      \$22  = \$8 [11:0];
    end else begin
      \$22  = \$9 [11:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$23  = integrator_tmp;
    if (\$6 ) begin
      \$23  = integrator5;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$24  = decimation_clk;
    if (\$6 ) begin
      \$24  = 1'h1;
    end else if (\$7 ) begin
      \$24  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    (* full_case = 32'd1 *)
    if (\$6 ) begin
      \$25  = 1'h1;
    end else if (\$7 ) begin
      \$25  = 1'h0;
    end else begin
      \$25  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$27  = integrator_d_tmp;
    if (valid_comb) begin
      \$27  = integrator_tmp;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$28  = comb6;
    if (valid_comb) begin
      \$28  = \$10 [71:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$29  = comb_d6;
    if (valid_comb) begin
      \$29  = comb6;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$30  = comb7;
    if (valid_comb) begin
      \$30  = \$11 [71:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$31  = comb_d7;
    if (valid_comb) begin
      \$31  = comb7;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$32  = comb8;
    if (valid_comb) begin
      \$32  = \$12 [71:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$33  = comb_d8;
    if (valid_comb) begin
      \$33  = comb8;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$34  = comb9;
    if (valid_comb) begin
      \$34  = \$13 [71:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$35  = comb_d9;
    if (valid_comb) begin
      \$35  = comb9;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$36  = comb10;
    if (valid_comb) begin
      \$36  = \$14 [71:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$4 ) begin end
    \$37  = data_out;
    if (valid_comb) begin
      \$37  = \$16 [11:0];
    end
  end
  assign pll80_rst = 1'h0;
  assign \$26  = decimation_clk;
  assign \$21  = \$5 [71:0];
  assign \$20  = \$4 [71:0];
  assign \$19  = \$3 [71:0];
  assign \$18  = \$2 [71:0];
  assign \$17  = \$1 [71:0];
endmodule

module \top.cic_sine (gain, data_in, data_clk, data_out, pll80_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$5  = 0;
  wire [72:0] \$1 ;
  wire [72:0] \$10 ;
  wire [72:0] \$11 ;
  wire [72:0] \$12 ;
  wire [72:0] \$13 ;
  wire [72:0] \$14 ;
  wire [6:0] \$15 ;
  wire [71:0] \$16 ;
  wire [71:0] \$17 ;
  wire [71:0] \$18 ;
  wire [71:0] \$19 ;
  wire [72:0] \$2 ;
  wire [71:0] \$20 ;
  wire [71:0] \$21 ;
  reg [11:0] \$22 ;
  reg [71:0] \$23 ;
  reg \$24 ;
  reg \$25 ;
  wire \$26 ;
  reg [71:0] \$27 ;
  reg [71:0] \$28 ;
  reg [71:0] \$29 ;
  wire [72:0] \$3 ;
  reg [71:0] \$30 ;
  reg [71:0] \$31 ;
  reg [71:0] \$32 ;
  reg [71:0] \$33 ;
  reg [71:0] \$34 ;
  reg [71:0] \$35 ;
  reg [71:0] \$36 ;
  reg [11:0] \$37 ;
  wire [72:0] \$4 ;
  wire [72:0] \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire [12:0] \$8 ;
  wire [12:0] \$9 ;
  reg [71:0] comb10 = 72'h000000000000000000;
  reg [71:0] comb6 = 72'h000000000000000000;
  reg [71:0] comb7 = 72'h000000000000000000;
  reg [71:0] comb8 = 72'h000000000000000000;
  reg [71:0] comb9 = 72'h000000000000000000;
  reg [71:0] comb_d6 = 72'h000000000000000000;
  reg [71:0] comb_d7 = 72'h000000000000000000;
  reg [71:0] comb_d8 = 72'h000000000000000000;
  reg [71:0] comb_d9 = 72'h000000000000000000;
  reg [11:0] count = 12'h000;
  output data_clk;
  reg data_clk = 1'h0;
  input [11:0] data_in;
  wire [11:0] data_in;
  output [11:0] data_out;
  reg [11:0] data_out = 12'h000;
  reg decimation_clk = 1'h0;
  input [1:0] gain;
  wire [1:0] gain;
  reg [71:0] integrator1 = 72'h000000000000000000;
  reg [71:0] integrator2 = 72'h000000000000000000;
  reg [71:0] integrator3 = 72'h000000000000000000;
  reg [71:0] integrator4 = 72'h000000000000000000;
  reg [71:0] integrator5 = 72'h000000000000000000;
  reg [71:0] integrator_d_tmp = 72'h000000000000000000;
  reg [71:0] integrator_tmp = 72'h000000000000000000;
  input pll80_clk;
  wire pll80_clk;
  wire pll80_rst;
  reg valid_comb = 1'h0;
  assign \$1  = $signed(data_in) + $signed(integrator1);
  assign \$2  = $signed(integrator1) + $signed(integrator2);
  assign \$3  = $signed(integrator2) + $signed(integrator3);
  assign \$4  = $signed(integrator3) + $signed(integrator4);
  assign \$5  = $signed(integrator4) + $signed(integrator5);
  assign \$6  = count == 12'hfff;
  assign \$7  = count == 12'h800;
  assign \$8  = count + 1'h1;
  assign \$9  = count + 1'h1;
  assign \$10  = $signed(integrator_tmp) - $signed(integrator_d_tmp);
  assign \$11  = $signed(comb6) - $signed(comb_d6);
  assign \$12  = $signed(comb7) - $signed(comb_d7);
  assign \$13  = $signed(comb8) - $signed(comb_d8);
  assign \$14  = $signed(comb9) - $signed(comb_d9);
  assign \$15  = 6'h3c - gain;
  assign \$16  = $signed(comb10) >>> \$15 ;
  always @(posedge pll80_clk)
    integrator1 <= \$17 ;
  always @(posedge pll80_clk)
    integrator2 <= \$18 ;
  always @(posedge pll80_clk)
    integrator3 <= \$19 ;
  always @(posedge pll80_clk)
    integrator4 <= \$20 ;
  always @(posedge pll80_clk)
    integrator5 <= \$21 ;
  always @(posedge pll80_clk)
    count <= \$22 ;
  always @(posedge pll80_clk)
    integrator_tmp <= \$23 ;
  always @(posedge pll80_clk)
    decimation_clk <= \$24 ;
  always @(posedge pll80_clk)
    valid_comb <= \$25 ;
  always @(posedge pll80_clk)
    data_clk <= \$26 ;
  always @(posedge pll80_clk)
    integrator_d_tmp <= \$27 ;
  always @(posedge pll80_clk)
    comb6 <= \$28 ;
  always @(posedge pll80_clk)
    comb_d6 <= \$29 ;
  always @(posedge pll80_clk)
    comb7 <= \$30 ;
  always @(posedge pll80_clk)
    comb_d7 <= \$31 ;
  always @(posedge pll80_clk)
    comb8 <= \$32 ;
  always @(posedge pll80_clk)
    comb_d8 <= \$33 ;
  always @(posedge pll80_clk)
    comb9 <= \$34 ;
  always @(posedge pll80_clk)
    comb_d9 <= \$35 ;
  always @(posedge pll80_clk)
    comb10 <= \$36 ;
  always @(posedge pll80_clk)
    data_out <= \$37 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    if (\$6 ) begin
      \$22  = 12'h000;
    end else if (\$7 ) begin
      \$22  = \$8 [11:0];
    end else begin
      \$22  = \$9 [11:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$23  = integrator_tmp;
    if (\$6 ) begin
      \$23  = integrator5;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$24  = decimation_clk;
    if (\$6 ) begin
      \$24  = 1'h1;
    end else if (\$7 ) begin
      \$24  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    (* full_case = 32'd1 *)
    if (\$6 ) begin
      \$25  = 1'h1;
    end else if (\$7 ) begin
      \$25  = 1'h0;
    end else begin
      \$25  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$27  = integrator_d_tmp;
    if (valid_comb) begin
      \$27  = integrator_tmp;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$28  = comb6;
    if (valid_comb) begin
      \$28  = \$10 [71:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$29  = comb_d6;
    if (valid_comb) begin
      \$29  = comb6;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$30  = comb7;
    if (valid_comb) begin
      \$30  = \$11 [71:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$31  = comb_d7;
    if (valid_comb) begin
      \$31  = comb7;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$32  = comb8;
    if (valid_comb) begin
      \$32  = \$12 [71:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$33  = comb_d8;
    if (valid_comb) begin
      \$33  = comb8;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$34  = comb9;
    if (valid_comb) begin
      \$34  = \$13 [71:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$35  = comb_d9;
    if (valid_comb) begin
      \$35  = comb9;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$36  = comb10;
    if (valid_comb) begin
      \$36  = \$14 [71:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$5 ) begin end
    \$37  = data_out;
    if (valid_comb) begin
      \$37  = \$16 [11:0];
    end
  end
  assign pll80_rst = 1'h0;
  assign \$26  = decimation_clk;
  assign \$21  = \$5 [71:0];
  assign \$20  = \$4 [71:0];
  assign \$19  = \$3 [71:0];
  assign \$18  = \$2 [71:0];
  assign \$17  = \$1 [71:0];
endmodule

module \top.mixer (sinewave_in, cosinewave_in, rf_in, rf_in_d_1, sinewave_out, cosinewave_out, pll80_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$6  = 0;
  wire \$1 ;
  wire [12:0] \$2 ;
  wire [12:0] \$3 ;
  wire \$4 ;
  wire \$5 ;
  reg [11:0] \$6 ;
  reg [11:0] \$7 ;
  input [11:0] cosinewave_in;
  wire [11:0] cosinewave_in;
  output [11:0] cosinewave_out;
  reg [11:0] cosinewave_out = 12'h000;
  input pll80_clk;
  wire pll80_clk;
  wire pll80_rst;
  input rf_in;
  wire rf_in;
  output rf_in_d_1;
  reg rf_in_d_1 = 1'h0;
  reg rf_in_d_2 = 1'h0;
  (* init = 1'h0 *)
  wire rf_out;
  input [11:0] sinewave_in;
  wire [11:0] sinewave_in;
  output [11:0] sinewave_out;
  reg [11:0] sinewave_out = 12'h000;
  assign \$3  = - $signed(cosinewave_in);
  always @(posedge pll80_clk)
    rf_in_d_1 <= \$4 ;
  always @(posedge pll80_clk)
    rf_in_d_2 <= \$5 ;
  always @(posedge pll80_clk)
    sinewave_out <= \$6 ;
  always @(posedge pll80_clk)
    cosinewave_out <= \$7 ;
  assign \$1  = ~ rf_in_d_2;
  assign \$2  = - $signed(sinewave_in);
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    (* full_case = 32'd1 *)
    if (\$1 ) begin
      \$6  = sinewave_in;
    end else begin
      \$6  = \$2 [11:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$6 ) begin end
    (* full_case = 32'd1 *)
    if (\$1 ) begin
      \$7  = cosinewave_in;
    end else begin
      \$7  = \$3 [11:0];
    end
  end
  assign pll80_rst = 1'h0;
  assign rf_out = rf_in_d_1;
  assign \$5  = rf_in_d_1;
  assign \$4  = rf_in;
endmodule

module \top.pin_antenna_0__rf_in (antenna_0__rf_in__io, antenna_0__rf_in__i);
  output antenna_0__rf_in__i;
  wire antenna_0__rf_in__i;
  input antenna_0__rf_in__io;
  wire antenna_0__rf_in__io;
  wire i;
  \top.pin_antenna_0__rf_in.buf  \buf  (
    .antenna_0__rf_in__io(antenna_0__rf_in__io),
    .i(antenna_0__rf_in__i)
  );
  assign i = antenna_0__rf_in__i;
endmodule

module \top.pin_antenna_0__rf_in.buf (antenna_0__rf_in__io, i);
  input antenna_0__rf_in__io;
  wire antenna_0__rf_in__io;
  output i;
  wire i;
  wire \i$1 ;
  \top.pin_antenna_0__rf_in.buf.buf  \buf  (
    .antenna_0__rf_in__io(antenna_0__rf_in__io),
    .i(\i$1 )
  );
  assign i = \i$1 ;
endmodule

module \top.pin_antenna_0__rf_in.buf.buf (antenna_0__rf_in__io, i);
  input antenna_0__rf_in__io;
  wire antenna_0__rf_in__io;
  output i;
  wire i;
  IB buf0 (
    .I(antenna_0__rf_in__io),
    .O(i)
  );
endmodule

module \top.pin_led_0 (led_0__io, o);
  output led_0__io;
  wire led_0__io;
  wire led_0__o;
  input o;
  wire o;
  \top.pin_led_0.buf  \buf  (
    .led_0__io(led_0__io),
    .\o$1 (o)
  );
  assign led_0__o = o;
endmodule

module \top.pin_led_0.buf (led_0__io, \o$1 );
  output led_0__io;
  wire led_0__io;
  wire o;
  input \o$1 ;
  wire \o$1 ;
  wire oe;
  wire t;
  \top.pin_led_0.buf.buf  \buf  (
    .led_0__io(led_0__io),
    .o(o),
    .t(1'h0)
  );
  assign oe = 1'h1;
  assign o = \o$1 ;
  assign t = 1'h0;
endmodule

module \top.pin_led_0.buf.buf (t, led_0__io, o);
  output led_0__io;
  wire led_0__io;
  input o;
  wire o;
  input t;
  wire t;
  OBZ buf0 (
    .I(o),
    .O(led_0__io),
    .T(t)
  );
endmodule

module \top.pin_led_1 (led_1__io, o);
  output led_1__io;
  wire led_1__io;
  wire led_1__o;
  input o;
  wire o;
  \top.pin_led_1.buf  \buf  (
    .led_1__io(led_1__io),
    .\o$1 (o)
  );
  assign led_1__o = o;
endmodule

module \top.pin_led_1.buf (led_1__io, \o$1 );
  output led_1__io;
  wire led_1__io;
  wire o;
  input \o$1 ;
  wire \o$1 ;
  wire oe;
  wire t;
  \top.pin_led_1.buf.buf  \buf  (
    .led_1__io(led_1__io),
    .o(o),
    .t(1'h0)
  );
  assign oe = 1'h1;
  assign o = \o$1 ;
  assign t = 1'h0;
endmodule

module \top.pin_led_1.buf.buf (t, led_1__io, o);
  output led_1__io;
  wire led_1__io;
  input o;
  wire o;
  input t;
  wire t;
  OBZ buf0 (
    .I(o),
    .O(led_1__io),
    .T(t)
  );
endmodule

module \top.pin_led_2 (led_2__io, o);
  output led_2__io;
  wire led_2__io;
  wire led_2__o;
  input o;
  wire o;
  \top.pin_led_2.buf  \buf  (
    .led_2__io(led_2__io),
    .\o$1 (o)
  );
  assign led_2__o = o;
endmodule

module \top.pin_led_2.buf (led_2__io, \o$1 );
  output led_2__io;
  wire led_2__io;
  wire o;
  input \o$1 ;
  wire \o$1 ;
  wire oe;
  wire t;
  \top.pin_led_2.buf.buf  \buf  (
    .led_2__io(led_2__io),
    .o(o),
    .t(1'h0)
  );
  assign oe = 1'h1;
  assign o = \o$1 ;
  assign t = 1'h0;
endmodule

module \top.pin_led_2.buf.buf (t, led_2__io, o);
  output led_2__io;
  wire led_2__io;
  input o;
  wire o;
  input t;
  wire t;
  OBZ buf0 (
    .I(o),
    .O(led_2__io),
    .T(t)
  );
endmodule

module \top.pin_led_3 (led_3__io, o);
  output led_3__io;
  wire led_3__io;
  wire led_3__o;
  input o;
  wire o;
  \top.pin_led_3.buf  \buf  (
    .led_3__io(led_3__io),
    .\o$1 (o)
  );
  assign led_3__o = o;
endmodule

module \top.pin_led_3.buf (led_3__io, \o$1 );
  output led_3__io;
  wire led_3__io;
  wire o;
  input \o$1 ;
  wire \o$1 ;
  wire oe;
  wire t;
  \top.pin_led_3.buf.buf  \buf  (
    .led_3__io(led_3__io),
    .o(o),
    .t(1'h0)
  );
  assign oe = 1'h1;
  assign o = \o$1 ;
  assign t = 1'h0;
endmodule

module \top.pin_led_3.buf.buf (t, led_3__io, o);
  output led_3__io;
  wire led_3__io;
  input o;
  wire o;
  input t;
  wire t;
  OBZ buf0 (
    .I(o),
    .O(led_3__io),
    .T(t)
  );
endmodule

module \top.pin_led_4 (led_4__io, o);
  output led_4__io;
  wire led_4__io;
  wire led_4__o;
  input o;
  wire o;
  \top.pin_led_4.buf  \buf  (
    .led_4__io(led_4__io),
    .\o$1 (o)
  );
  assign led_4__o = o;
endmodule

module \top.pin_led_4.buf (led_4__io, \o$1 );
  output led_4__io;
  wire led_4__io;
  wire o;
  input \o$1 ;
  wire \o$1 ;
  wire oe;
  wire t;
  \top.pin_led_4.buf.buf  \buf  (
    .led_4__io(led_4__io),
    .o(o),
    .t(1'h0)
  );
  assign oe = 1'h1;
  assign o = \o$1 ;
  assign t = 1'h0;
endmodule

module \top.pin_led_4.buf.buf (t, led_4__io, o);
  output led_4__io;
  wire led_4__io;
  input o;
  wire o;
  input t;
  wire t;
  OBZ buf0 (
    .I(o),
    .O(led_4__io),
    .T(t)
  );
endmodule

module \top.pin_led_5 (led_5__io, o);
  output led_5__io;
  wire led_5__io;
  wire led_5__o;
  input o;
  wire o;
  \top.pin_led_5.buf  \buf  (
    .led_5__io(led_5__io),
    .\o$1 (o)
  );
  assign led_5__o = o;
endmodule

module \top.pin_led_5.buf (led_5__io, \o$1 );
  output led_5__io;
  wire led_5__io;
  wire o;
  input \o$1 ;
  wire \o$1 ;
  wire oe;
  wire t;
  \top.pin_led_5.buf.buf  \buf  (
    .led_5__io(led_5__io),
    .o(o),
    .t(1'h0)
  );
  assign oe = 1'h1;
  assign o = \o$1 ;
  assign t = 1'h0;
endmodule

module \top.pin_led_5.buf.buf (t, led_5__io, o);
  output led_5__io;
  wire led_5__io;
  input o;
  wire o;
  input t;
  wire t;
  OBZ buf0 (
    .I(o),
    .O(led_5__io),
    .T(t)
  );
endmodule

module \top.pin_led_6 (led_6__io, o);
  output led_6__io;
  wire led_6__io;
  wire led_6__o;
  input o;
  wire o;
  \top.pin_led_6.buf  \buf  (
    .led_6__io(led_6__io),
    .\o$1 (o)
  );
  assign led_6__o = o;
endmodule

module \top.pin_led_6.buf (led_6__io, \o$1 );
  output led_6__io;
  wire led_6__io;
  wire o;
  input \o$1 ;
  wire \o$1 ;
  wire oe;
  wire t;
  \top.pin_led_6.buf.buf  \buf  (
    .led_6__io(led_6__io),
    .o(o),
    .t(1'h0)
  );
  assign oe = 1'h1;
  assign o = \o$1 ;
  assign t = 1'h0;
endmodule

module \top.pin_led_6.buf.buf (t, led_6__io, o);
  output led_6__io;
  wire led_6__io;
  input o;
  wire o;
  input t;
  wire t;
  OBZ buf0 (
    .I(o),
    .O(led_6__io),
    .T(t)
  );
endmodule

module \top.pin_led_7 (led_7__io, o);
  output led_7__io;
  wire led_7__io;
  wire led_7__o;
  input o;
  wire o;
  \top.pin_led_7.buf  \buf  (
    .led_7__io(led_7__io),
    .\o$1 (o)
  );
  assign led_7__o = o;
endmodule

module \top.pin_led_7.buf (led_7__io, \o$1 );
  output led_7__io;
  wire led_7__io;
  wire o;
  input \o$1 ;
  wire \o$1 ;
  wire oe;
  wire t;
  \top.pin_led_7.buf.buf  \buf  (
    .led_7__io(led_7__io),
    .o(o),
    .t(1'h0)
  );
  assign oe = 1'h1;
  assign o = \o$1 ;
  assign t = 1'h0;
endmodule

module \top.pin_led_7.buf.buf (t, led_7__io, o);
  output led_7__io;
  wire led_7__io;
  input o;
  wire o;
  input t;
  wire t;
  OBZ buf0 (
    .I(o),
    .O(led_7__io),
    .T(t)
  );
endmodule

module \top.pin_pwm_0__pwm_out (pwm_0__pwm_out__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out__io;
  wire pwm_0__pwm_out__io;
  wire pwm_0__pwm_out__o;
  \top.pin_pwm_0__pwm_out.buf  \buf  (
    .\o$1 (o),
    .pwm_0__pwm_out__io(pwm_0__pwm_out__io)
  );
  assign pwm_0__pwm_out__o = o;
endmodule

module \top.pin_pwm_0__pwm_out.buf (pwm_0__pwm_out__io, \o$1 );
  wire o;
  input \o$1 ;
  wire \o$1 ;
  wire oe;
  output pwm_0__pwm_out__io;
  wire pwm_0__pwm_out__io;
  wire t;
  \top.pin_pwm_0__pwm_out.buf.buf  \buf  (
    .o(o),
    .pwm_0__pwm_out__io(pwm_0__pwm_out__io),
    .t(1'h0)
  );
  assign oe = 1'h1;
  assign o = \o$1 ;
  assign t = 1'h0;
endmodule

module \top.pin_pwm_0__pwm_out.buf.buf (t, pwm_0__pwm_out__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out__io;
  wire pwm_0__pwm_out__io;
  input t;
  wire t;
  OBZ buf0 (
    .I(o),
    .O(pwm_0__pwm_out__io),
    .T(t)
  );
endmodule

module \top.pin_pwm_0__pwm_out_n1 (pwm_0__pwm_out_n1__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out_n1__io;
  wire pwm_0__pwm_out_n1__io;
  wire pwm_0__pwm_out_n1__o;
  \top.pin_pwm_0__pwm_out_n1.buf  \buf  (
    .\o$1 (o),
    .pwm_0__pwm_out_n1__io(pwm_0__pwm_out_n1__io)
  );
  assign pwm_0__pwm_out_n1__o = o;
endmodule

module \top.pin_pwm_0__pwm_out_n1.buf (pwm_0__pwm_out_n1__io, \o$1 );
  wire o;
  input \o$1 ;
  wire \o$1 ;
  wire oe;
  output pwm_0__pwm_out_n1__io;
  wire pwm_0__pwm_out_n1__io;
  wire t;
  \top.pin_pwm_0__pwm_out_n1.buf.buf  \buf  (
    .o(o),
    .pwm_0__pwm_out_n1__io(pwm_0__pwm_out_n1__io),
    .t(1'h0)
  );
  assign oe = 1'h1;
  assign o = \o$1 ;
  assign t = 1'h0;
endmodule

module \top.pin_pwm_0__pwm_out_n1.buf.buf (t, pwm_0__pwm_out_n1__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out_n1__io;
  wire pwm_0__pwm_out_n1__io;
  input t;
  wire t;
  OBZ buf0 (
    .I(o),
    .O(pwm_0__pwm_out_n1__io),
    .T(t)
  );
endmodule

module \top.pin_pwm_0__pwm_out_n2 (pwm_0__pwm_out_n2__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out_n2__io;
  wire pwm_0__pwm_out_n2__io;
  wire pwm_0__pwm_out_n2__o;
  \top.pin_pwm_0__pwm_out_n2.buf  \buf  (
    .\o$1 (o),
    .pwm_0__pwm_out_n2__io(pwm_0__pwm_out_n2__io)
  );
  assign pwm_0__pwm_out_n2__o = o;
endmodule

module \top.pin_pwm_0__pwm_out_n2.buf (pwm_0__pwm_out_n2__io, \o$1 );
  wire o;
  input \o$1 ;
  wire \o$1 ;
  wire oe;
  output pwm_0__pwm_out_n2__io;
  wire pwm_0__pwm_out_n2__io;
  wire t;
  \top.pin_pwm_0__pwm_out_n2.buf.buf  \buf  (
    .o(o),
    .pwm_0__pwm_out_n2__io(pwm_0__pwm_out_n2__io),
    .t(1'h0)
  );
  assign oe = 1'h1;
  assign o = \o$1 ;
  assign t = 1'h0;
endmodule

module \top.pin_pwm_0__pwm_out_n2.buf.buf (t, pwm_0__pwm_out_n2__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out_n2__io;
  wire pwm_0__pwm_out_n2__io;
  input t;
  wire t;
  OBZ buf0 (
    .I(o),
    .O(pwm_0__pwm_out_n2__io),
    .T(t)
  );
endmodule

module \top.pin_pwm_0__pwm_out_n3 (pwm_0__pwm_out_n3__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out_n3__io;
  wire pwm_0__pwm_out_n3__io;
  wire pwm_0__pwm_out_n3__o;
  \top.pin_pwm_0__pwm_out_n3.buf  \buf  (
    .\o$1 (o),
    .pwm_0__pwm_out_n3__io(pwm_0__pwm_out_n3__io)
  );
  assign pwm_0__pwm_out_n3__o = o;
endmodule

module \top.pin_pwm_0__pwm_out_n3.buf (pwm_0__pwm_out_n3__io, \o$1 );
  wire o;
  input \o$1 ;
  wire \o$1 ;
  wire oe;
  output pwm_0__pwm_out_n3__io;
  wire pwm_0__pwm_out_n3__io;
  wire t;
  \top.pin_pwm_0__pwm_out_n3.buf.buf  \buf  (
    .o(o),
    .pwm_0__pwm_out_n3__io(pwm_0__pwm_out_n3__io),
    .t(1'h0)
  );
  assign oe = 1'h1;
  assign o = \o$1 ;
  assign t = 1'h0;
endmodule

module \top.pin_pwm_0__pwm_out_n3.buf.buf (t, pwm_0__pwm_out_n3__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out_n3__io;
  wire pwm_0__pwm_out_n3__io;
  input t;
  wire t;
  OBZ buf0 (
    .I(o),
    .O(pwm_0__pwm_out_n3__io),
    .T(t)
  );
endmodule

module \top.pin_pwm_0__pwm_out_n4 (pwm_0__pwm_out_n4__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out_n4__io;
  wire pwm_0__pwm_out_n4__io;
  wire pwm_0__pwm_out_n4__o;
  \top.pin_pwm_0__pwm_out_n4.buf  \buf  (
    .\o$1 (o),
    .pwm_0__pwm_out_n4__io(pwm_0__pwm_out_n4__io)
  );
  assign pwm_0__pwm_out_n4__o = o;
endmodule

module \top.pin_pwm_0__pwm_out_n4.buf (pwm_0__pwm_out_n4__io, \o$1 );
  wire o;
  input \o$1 ;
  wire \o$1 ;
  wire oe;
  output pwm_0__pwm_out_n4__io;
  wire pwm_0__pwm_out_n4__io;
  wire t;
  \top.pin_pwm_0__pwm_out_n4.buf.buf  \buf  (
    .o(o),
    .pwm_0__pwm_out_n4__io(pwm_0__pwm_out_n4__io),
    .t(1'h0)
  );
  assign oe = 1'h1;
  assign o = \o$1 ;
  assign t = 1'h0;
endmodule

module \top.pin_pwm_0__pwm_out_n4.buf.buf (t, pwm_0__pwm_out_n4__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out_n4__io;
  wire pwm_0__pwm_out_n4__io;
  input t;
  wire t;
  OBZ buf0 (
    .I(o),
    .O(pwm_0__pwm_out_n4__io),
    .T(t)
  );
endmodule

module \top.pin_pwm_0__pwm_out_p1 (pwm_0__pwm_out_p1__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out_p1__io;
  wire pwm_0__pwm_out_p1__io;
  wire pwm_0__pwm_out_p1__o;
  \top.pin_pwm_0__pwm_out_p1.buf  \buf  (
    .\o$1 (o),
    .pwm_0__pwm_out_p1__io(pwm_0__pwm_out_p1__io)
  );
  assign pwm_0__pwm_out_p1__o = o;
endmodule

module \top.pin_pwm_0__pwm_out_p1.buf (pwm_0__pwm_out_p1__io, \o$1 );
  wire o;
  input \o$1 ;
  wire \o$1 ;
  wire oe;
  output pwm_0__pwm_out_p1__io;
  wire pwm_0__pwm_out_p1__io;
  wire t;
  \top.pin_pwm_0__pwm_out_p1.buf.buf  \buf  (
    .o(o),
    .pwm_0__pwm_out_p1__io(pwm_0__pwm_out_p1__io),
    .t(1'h0)
  );
  assign oe = 1'h1;
  assign o = \o$1 ;
  assign t = 1'h0;
endmodule

module \top.pin_pwm_0__pwm_out_p1.buf.buf (t, pwm_0__pwm_out_p1__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out_p1__io;
  wire pwm_0__pwm_out_p1__io;
  input t;
  wire t;
  OBZ buf0 (
    .I(o),
    .O(pwm_0__pwm_out_p1__io),
    .T(t)
  );
endmodule

module \top.pin_pwm_0__pwm_out_p2 (pwm_0__pwm_out_p2__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out_p2__io;
  wire pwm_0__pwm_out_p2__io;
  wire pwm_0__pwm_out_p2__o;
  \top.pin_pwm_0__pwm_out_p2.buf  \buf  (
    .\o$1 (o),
    .pwm_0__pwm_out_p2__io(pwm_0__pwm_out_p2__io)
  );
  assign pwm_0__pwm_out_p2__o = o;
endmodule

module \top.pin_pwm_0__pwm_out_p2.buf (pwm_0__pwm_out_p2__io, \o$1 );
  wire o;
  input \o$1 ;
  wire \o$1 ;
  wire oe;
  output pwm_0__pwm_out_p2__io;
  wire pwm_0__pwm_out_p2__io;
  wire t;
  \top.pin_pwm_0__pwm_out_p2.buf.buf  \buf  (
    .o(o),
    .pwm_0__pwm_out_p2__io(pwm_0__pwm_out_p2__io),
    .t(1'h0)
  );
  assign oe = 1'h1;
  assign o = \o$1 ;
  assign t = 1'h0;
endmodule

module \top.pin_pwm_0__pwm_out_p2.buf.buf (t, pwm_0__pwm_out_p2__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out_p2__io;
  wire pwm_0__pwm_out_p2__io;
  input t;
  wire t;
  OBZ buf0 (
    .I(o),
    .O(pwm_0__pwm_out_p2__io),
    .T(t)
  );
endmodule

module \top.pin_pwm_0__pwm_out_p3 (pwm_0__pwm_out_p3__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out_p3__io;
  wire pwm_0__pwm_out_p3__io;
  wire pwm_0__pwm_out_p3__o;
  \top.pin_pwm_0__pwm_out_p3.buf  \buf  (
    .\o$1 (o),
    .pwm_0__pwm_out_p3__io(pwm_0__pwm_out_p3__io)
  );
  assign pwm_0__pwm_out_p3__o = o;
endmodule

module \top.pin_pwm_0__pwm_out_p3.buf (pwm_0__pwm_out_p3__io, \o$1 );
  wire o;
  input \o$1 ;
  wire \o$1 ;
  wire oe;
  output pwm_0__pwm_out_p3__io;
  wire pwm_0__pwm_out_p3__io;
  wire t;
  \top.pin_pwm_0__pwm_out_p3.buf.buf  \buf  (
    .o(o),
    .pwm_0__pwm_out_p3__io(pwm_0__pwm_out_p3__io),
    .t(1'h0)
  );
  assign oe = 1'h1;
  assign o = \o$1 ;
  assign t = 1'h0;
endmodule

module \top.pin_pwm_0__pwm_out_p3.buf.buf (t, pwm_0__pwm_out_p3__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out_p3__io;
  wire pwm_0__pwm_out_p3__io;
  input t;
  wire t;
  OBZ buf0 (
    .I(o),
    .O(pwm_0__pwm_out_p3__io),
    .T(t)
  );
endmodule

module \top.pin_pwm_0__pwm_out_p4 (pwm_0__pwm_out_p4__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out_p4__io;
  wire pwm_0__pwm_out_p4__io;
  wire pwm_0__pwm_out_p4__o;
  \top.pin_pwm_0__pwm_out_p4.buf  \buf  (
    .\o$1 (o),
    .pwm_0__pwm_out_p4__io(pwm_0__pwm_out_p4__io)
  );
  assign pwm_0__pwm_out_p4__o = o;
endmodule

module \top.pin_pwm_0__pwm_out_p4.buf (pwm_0__pwm_out_p4__io, \o$1 );
  wire o;
  input \o$1 ;
  wire \o$1 ;
  wire oe;
  output pwm_0__pwm_out_p4__io;
  wire pwm_0__pwm_out_p4__io;
  wire t;
  \top.pin_pwm_0__pwm_out_p4.buf.buf  \buf  (
    .o(o),
    .pwm_0__pwm_out_p4__io(pwm_0__pwm_out_p4__io),
    .t(1'h0)
  );
  assign oe = 1'h1;
  assign o = \o$1 ;
  assign t = 1'h0;
endmodule

module \top.pin_pwm_0__pwm_out_p4.buf.buf (t, pwm_0__pwm_out_p4__io, o);
  input o;
  wire o;
  output pwm_0__pwm_out_p4__io;
  wire pwm_0__pwm_out_p4__io;
  input t;
  wire t;
  OBZ buf0 (
    .I(o),
    .O(pwm_0__pwm_out_p4__io),
    .T(t)
  );
endmodule

module \top.pin_uart_0__dtr (uart_0__dtr__io);
  wire i;
  wire uart_0__dtr__i;
  input uart_0__dtr__io;
  wire uart_0__dtr__io;
  \top.pin_uart_0__dtr.buf  \buf  (
    .i(uart_0__dtr__i),
    .uart_0__dtr__io(uart_0__dtr__io)
  );
  assign i = uart_0__dtr__i;
endmodule

module \top.pin_uart_0__dtr.buf (uart_0__dtr__io, i);
  output i;
  wire i;
  wire \i$1 ;
  input uart_0__dtr__io;
  wire uart_0__dtr__io;
  \top.pin_uart_0__dtr.buf.buf  \buf  (
    .i(\i$1 ),
    .uart_0__dtr__io(uart_0__dtr__io)
  );
  assign i = \i$1 ;
endmodule

module \top.pin_uart_0__dtr.buf.buf (uart_0__dtr__io, i);
  output i;
  wire i;
  input uart_0__dtr__io;
  wire uart_0__dtr__io;
  IB buf0 (
    .I(uart_0__dtr__io),
    .O(i)
  );
endmodule

module \top.pin_uart_0__rts (uart_0__rts__io);
  wire i;
  wire uart_0__rts__i;
  input uart_0__rts__io;
  wire uart_0__rts__io;
  \top.pin_uart_0__rts.buf  \buf  (
    .i(uart_0__rts__i),
    .uart_0__rts__io(uart_0__rts__io)
  );
  assign i = uart_0__rts__i;
endmodule

module \top.pin_uart_0__rts.buf (uart_0__rts__io, i);
  output i;
  wire i;
  wire \i$1 ;
  input uart_0__rts__io;
  wire uart_0__rts__io;
  \top.pin_uart_0__rts.buf.buf  \buf  (
    .i(\i$1 ),
    .uart_0__rts__io(uart_0__rts__io)
  );
  assign i = \i$1 ;
endmodule

module \top.pin_uart_0__rts.buf.buf (uart_0__rts__io, i);
  output i;
  wire i;
  input uart_0__rts__io;
  wire uart_0__rts__io;
  IB buf0 (
    .I(uart_0__rts__io),
    .O(i)
  );
endmodule

module \top.pin_uart_0__rx (uart_0__rx__io, uart_0__rx__i);
  wire i;
  output uart_0__rx__i;
  wire uart_0__rx__i;
  input uart_0__rx__io;
  wire uart_0__rx__io;
  \top.pin_uart_0__rx.buf  \buf  (
    .i(uart_0__rx__i),
    .uart_0__rx__io(uart_0__rx__io)
  );
  assign i = uart_0__rx__i;
endmodule

module \top.pin_uart_0__rx.buf (uart_0__rx__io, i);
  output i;
  wire i;
  wire \i$1 ;
  input uart_0__rx__io;
  wire uart_0__rx__io;
  \top.pin_uart_0__rx.buf.buf  \buf  (
    .i(\i$1 ),
    .uart_0__rx__io(uart_0__rx__io)
  );
  assign i = \i$1 ;
endmodule

module \top.pin_uart_0__rx.buf.buf (uart_0__rx__io, i);
  output i;
  wire i;
  input uart_0__rx__io;
  wire uart_0__rx__io;
  IB buf0 (
    .I(uart_0__rx__io),
    .O(i)
  );
endmodule

module \top.pin_uart_0__tx (uart_0__tx__io);
  wire o;
  output uart_0__tx__io;
  wire uart_0__tx__io;
  wire uart_0__tx__o;
  \top.pin_uart_0__tx.buf  \buf  (
    .uart_0__tx__io(uart_0__tx__io)
  );
  assign o = 1'h0;
  assign uart_0__tx__o = 1'h0;
endmodule

module \top.pin_uart_0__tx.buf (uart_0__tx__io);
  wire o;
  wire \o$1 ;
  wire oe;
  wire t;
  output uart_0__tx__io;
  wire uart_0__tx__io;
  \top.pin_uart_0__tx.buf.buf  \buf  (
    .o(1'h0),
    .t(1'h0),
    .uart_0__tx__io(uart_0__tx__io)
  );
  assign \o$1  = 1'h0;
  assign oe = 1'h1;
  assign o = 1'h0;
  assign t = 1'h0;
endmodule

module \top.pin_uart_0__tx.buf.buf (t, uart_0__tx__io, o);
  input o;
  wire o;
  input t;
  wire t;
  output uart_0__tx__io;
  wire uart_0__tx__io;
  OBZ buf0 (
    .I(o),
    .O(uart_0__tx__io),
    .T(t)
  );
endmodule

module \top.pwm (data_in, pwm_out, pll80_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$7  = 0;
  wire [10:0] \$1 ;
  wire \$2 ;
  wire [12:0] \$3 ;
  wire \$4 ;
  wire [9:0] \$5 ;
  reg [11:0] \$6 ;
  reg \$7 ;
  reg [9:0] count = 10'h000;
  input [11:0] data_in;
  wire [11:0] data_in;
  reg [11:0] data_in_reg = 12'h000;
  input pll80_clk;
  wire pll80_clk;
  wire pll80_rst;
  output pwm_out;
  reg pwm_out = 1'h0;
  assign \$3  = data_in + 10'h200;
  assign \$4  = count > data_in_reg[9:0];
  always @(posedge pll80_clk)
    count <= \$5 ;
  always @(posedge pll80_clk)
    data_in_reg <= \$6 ;
  always @(posedge pll80_clk)
    pwm_out <= \$7 ;
  assign \$1  = count + 1'h1;
  assign \$2  = ! count;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    \$6  = data_in_reg;
    if (\$2 ) begin
      \$6  = \$3 [11:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$7 ) begin end
    (* full_case = 32'd1 *)
    if (\$4 ) begin
      \$7  = 1'h0;
    end else begin
      \$7  = 1'h1;
    end
  end
  assign pll80_rst = 1'h0;
  assign \$5  = \$1 [9:0];
endmodule

module \top.sine_cosine_generator (sinewave, cosinewave, phase_increment, pll80_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$8  = 0;
  wire [65:0] \$1 ;
  wire [8:0] \$2 ;
  wire [8:0] \$3 ;
  reg [63:0] \$4 ;
  wire [8:0] \$7 ;
  wire \$9 ;
  output [11:0] cosinewave;
  wire [11:0] cosinewave;
  reg [63:0] phase_accumulator = 64'h0000000000000000;
  input [63:0] phase_increment;
  wire [63:0] phase_increment;
  input pll80_clk;
  wire pll80_clk;
  wire pll80_rst;
  wire [7:0] rd_port_cosine__addr;
  wire [11:0] rd_port_cosine__data;
  wire [7:0] rd_port_sine__addr;
  wire [11:0] rd_port_sine__data;
  wire rst;
  wire sample_clock_ce;
  output [11:0] sinewave;
  wire [11:0] sinewave;
  (* src = "/home/user/SDR-HLS/2.HLSImplementation/SineLUT/sine_cosine_generator_lut.py:82" *)
  reg [11:0] memory [255:0];
  initial begin
    memory[0] = 12'h019;
    memory[1] = 12'h04b;
    memory[2] = 12'h07d;
    memory[3] = 12'h0af;
    memory[4] = 12'h0e1;
    memory[5] = 12'h113;
    memory[6] = 12'h145;
    memory[7] = 12'h176;
    memory[8] = 12'h1a7;
    memory[9] = 12'h1d8;
    memory[10] = 12'h209;
    memory[11] = 12'h23a;
    memory[12] = 12'h26a;
    memory[13] = 12'h299;
    memory[14] = 12'h2c9;
    memory[15] = 12'h2f8;
    memory[16] = 12'h326;
    memory[17] = 12'h354;
    memory[18] = 12'h381;
    memory[19] = 12'h3ae;
    memory[20] = 12'h3db;
    memory[21] = 12'h406;
    memory[22] = 12'h431;
    memory[23] = 12'h45c;
    memory[24] = 12'h486;
    memory[25] = 12'h4af;
    memory[26] = 12'h4d7;
    memory[27] = 12'h4ff;
    memory[28] = 12'h525;
    memory[29] = 12'h54b;
    memory[30] = 12'h571;
    memory[31] = 12'h595;
    memory[32] = 12'h5b9;
    memory[33] = 12'h5db;
    memory[34] = 12'h5fd;
    memory[35] = 12'h61e;
    memory[36] = 12'h63e;
    memory[37] = 12'h65d;
    memory[38] = 12'h67b;
    memory[39] = 12'h697;
    memory[40] = 12'h6b3;
    memory[41] = 12'h6ce;
    memory[42] = 12'h6e8;
    memory[43] = 12'h701;
    memory[44] = 12'h718;
    memory[45] = 12'h72f;
    memory[46] = 12'h745;
    memory[47] = 12'h759;
    memory[48] = 12'h76c;
    memory[49] = 12'h77e;
    memory[50] = 12'h78f;
    memory[51] = 12'h79f;
    memory[52] = 12'h7ae;
    memory[53] = 12'h7bb;
    memory[54] = 12'h7c7;
    memory[55] = 12'h7d2;
    memory[56] = 12'h7dc;
    memory[57] = 12'h7e5;
    memory[58] = 12'h7ec;
    memory[59] = 12'h7f2;
    memory[60] = 12'h7f7;
    memory[61] = 12'h7fb;
    memory[62] = 12'h7fd;
    memory[63] = 12'h7fe;
    memory[64] = 12'h7fe;
    memory[65] = 12'h7fd;
    memory[66] = 12'h7fb;
    memory[67] = 12'h7f7;
    memory[68] = 12'h7f2;
    memory[69] = 12'h7ec;
    memory[70] = 12'h7e5;
    memory[71] = 12'h7dc;
    memory[72] = 12'h7d2;
    memory[73] = 12'h7c7;
    memory[74] = 12'h7bb;
    memory[75] = 12'h7ae;
    memory[76] = 12'h79f;
    memory[77] = 12'h78f;
    memory[78] = 12'h77e;
    memory[79] = 12'h76c;
    memory[80] = 12'h759;
    memory[81] = 12'h745;
    memory[82] = 12'h72f;
    memory[83] = 12'h718;
    memory[84] = 12'h701;
    memory[85] = 12'h6e8;
    memory[86] = 12'h6ce;
    memory[87] = 12'h6b3;
    memory[88] = 12'h697;
    memory[89] = 12'h67b;
    memory[90] = 12'h65d;
    memory[91] = 12'h63e;
    memory[92] = 12'h61e;
    memory[93] = 12'h5fd;
    memory[94] = 12'h5db;
    memory[95] = 12'h5b9;
    memory[96] = 12'h595;
    memory[97] = 12'h571;
    memory[98] = 12'h54b;
    memory[99] = 12'h525;
    memory[100] = 12'h4ff;
    memory[101] = 12'h4d7;
    memory[102] = 12'h4af;
    memory[103] = 12'h486;
    memory[104] = 12'h45c;
    memory[105] = 12'h431;
    memory[106] = 12'h406;
    memory[107] = 12'h3db;
    memory[108] = 12'h3ae;
    memory[109] = 12'h381;
    memory[110] = 12'h354;
    memory[111] = 12'h326;
    memory[112] = 12'h2f8;
    memory[113] = 12'h2c9;
    memory[114] = 12'h299;
    memory[115] = 12'h26a;
    memory[116] = 12'h23a;
    memory[117] = 12'h209;
    memory[118] = 12'h1d8;
    memory[119] = 12'h1a7;
    memory[120] = 12'h176;
    memory[121] = 12'h145;
    memory[122] = 12'h113;
    memory[123] = 12'h0e1;
    memory[124] = 12'h0af;
    memory[125] = 12'h07d;
    memory[126] = 12'h04b;
    memory[127] = 12'h019;
    memory[128] = 12'hfe7;
    memory[129] = 12'hfb5;
    memory[130] = 12'hf83;
    memory[131] = 12'hf51;
    memory[132] = 12'hf1f;
    memory[133] = 12'heed;
    memory[134] = 12'hebb;
    memory[135] = 12'he8a;
    memory[136] = 12'he59;
    memory[137] = 12'he28;
    memory[138] = 12'hdf7;
    memory[139] = 12'hdc6;
    memory[140] = 12'hd96;
    memory[141] = 12'hd67;
    memory[142] = 12'hd37;
    memory[143] = 12'hd08;
    memory[144] = 12'hcda;
    memory[145] = 12'hcac;
    memory[146] = 12'hc7f;
    memory[147] = 12'hc52;
    memory[148] = 12'hc25;
    memory[149] = 12'hbfa;
    memory[150] = 12'hbcf;
    memory[151] = 12'hba4;
    memory[152] = 12'hb7a;
    memory[153] = 12'hb51;
    memory[154] = 12'hb29;
    memory[155] = 12'hb01;
    memory[156] = 12'hadb;
    memory[157] = 12'hab5;
    memory[158] = 12'ha8f;
    memory[159] = 12'ha6b;
    memory[160] = 12'ha47;
    memory[161] = 12'ha25;
    memory[162] = 12'ha03;
    memory[163] = 12'h9e2;
    memory[164] = 12'h9c2;
    memory[165] = 12'h9a3;
    memory[166] = 12'h985;
    memory[167] = 12'h969;
    memory[168] = 12'h94d;
    memory[169] = 12'h932;
    memory[170] = 12'h918;
    memory[171] = 12'h8ff;
    memory[172] = 12'h8e8;
    memory[173] = 12'h8d1;
    memory[174] = 12'h8bb;
    memory[175] = 12'h8a7;
    memory[176] = 12'h894;
    memory[177] = 12'h882;
    memory[178] = 12'h871;
    memory[179] = 12'h861;
    memory[180] = 12'h852;
    memory[181] = 12'h845;
    memory[182] = 12'h839;
    memory[183] = 12'h82e;
    memory[184] = 12'h824;
    memory[185] = 12'h81b;
    memory[186] = 12'h814;
    memory[187] = 12'h80e;
    memory[188] = 12'h809;
    memory[189] = 12'h805;
    memory[190] = 12'h803;
    memory[191] = 12'h802;
    memory[192] = 12'h802;
    memory[193] = 12'h803;
    memory[194] = 12'h805;
    memory[195] = 12'h809;
    memory[196] = 12'h80e;
    memory[197] = 12'h814;
    memory[198] = 12'h81b;
    memory[199] = 12'h824;
    memory[200] = 12'h82e;
    memory[201] = 12'h839;
    memory[202] = 12'h845;
    memory[203] = 12'h852;
    memory[204] = 12'h861;
    memory[205] = 12'h871;
    memory[206] = 12'h882;
    memory[207] = 12'h894;
    memory[208] = 12'h8a7;
    memory[209] = 12'h8bb;
    memory[210] = 12'h8d1;
    memory[211] = 12'h8e8;
    memory[212] = 12'h8ff;
    memory[213] = 12'h918;
    memory[214] = 12'h932;
    memory[215] = 12'h94d;
    memory[216] = 12'h969;
    memory[217] = 12'h985;
    memory[218] = 12'h9a3;
    memory[219] = 12'h9c2;
    memory[220] = 12'h9e2;
    memory[221] = 12'ha03;
    memory[222] = 12'ha25;
    memory[223] = 12'ha47;
    memory[224] = 12'ha6b;
    memory[225] = 12'ha8f;
    memory[226] = 12'hab5;
    memory[227] = 12'hadb;
    memory[228] = 12'hb01;
    memory[229] = 12'hb29;
    memory[230] = 12'hb51;
    memory[231] = 12'hb7a;
    memory[232] = 12'hba4;
    memory[233] = 12'hbcf;
    memory[234] = 12'hbfa;
    memory[235] = 12'hc25;
    memory[236] = 12'hc52;
    memory[237] = 12'hc7f;
    memory[238] = 12'hcac;
    memory[239] = 12'hcda;
    memory[240] = 12'hd08;
    memory[241] = 12'hd37;
    memory[242] = 12'hd67;
    memory[243] = 12'hd96;
    memory[244] = 12'hdc6;
    memory[245] = 12'hdf7;
    memory[246] = 12'he28;
    memory[247] = 12'he59;
    memory[248] = 12'he8a;
    memory[249] = 12'hebb;
    memory[250] = 12'heed;
    memory[251] = 12'hf1f;
    memory[252] = 12'hf51;
    memory[253] = 12'hf83;
    memory[254] = 12'hfb5;
    memory[255] = 12'hfe7;
  end
  reg [11:0] _0_;
  reg [11:0] _1_;
  always @(posedge pll80_clk) begin
    _0_ <= memory[\$3 [7:0]];
    _1_ <= memory[phase_accumulator[63:56]];
  end
  assign cosinewave = _0_;
  assign sinewave = _1_;
  always @(posedge pll80_clk)
    phase_accumulator <= \$4 ;
  assign \$1  = $signed({ 1'h0, phase_accumulator }) + $signed(phase_increment);
  assign \$2  = phase_accumulator[63:56] + 7'h40;
  assign \$7  = \$2  % 9'h100;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$8 ) begin end
    (* full_case = 32'd1 *)
    casez (2'h2)
      2'b1?:
          \$4  = \$1 [63:0];
    endcase
  end
  assign pll80_rst = 1'h0;
  assign rst = 1'h0;
  assign sample_clock_ce = 1'h1;
  assign rd_port_sine__addr = phase_accumulator[63:56];
  assign rd_port_sine__data = sinewave;
  assign rd_port_cosine__addr = \$3 [7:0];
  assign rd_port_cosine__data = cosinewave;
  assign \$9  = 1'h1;
  assign \$3  = \$7 ;
endmodule

module \top.uart_rx (i_Rx_Serial, o_Rx_DV, o_Rx_Byte, pll80_clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$9  = 0;
  wire [8:0] \$1 ;
  wire \$10 ;
  wire [3:0] \$11 ;
  wire \$12 ;
  wire [16:0] \$13 ;
  wire [7:0] \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire \$18 ;
  reg \$19 ;
  wire \$2 ;
  reg [15:0] \$20 ;
  reg [2:0] \$21 ;
  reg [2:0] \$22 ;
  reg [7:0] \$23 ;
  reg [7:0] \$24 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire [16:0] \$7 ;
  wire \$8 ;
  wire [16:0] \$9 ;
  reg [7:0] UartClk = 8'h00;
  input i_Rx_Serial;
  wire i_Rx_Serial;
  output [7:0] o_Rx_Byte;
  reg [7:0] o_Rx_Byte = 8'h00;
  output o_Rx_DV;
  reg o_Rx_DV = 1'h0;
  input pll80_clk;
  wire pll80_clk;
  wire pll80_rst;
  reg [2:0] r_Bit_Index = 3'h0;
  reg [15:0] r_Clock_Count = 16'h0000;
  reg [7:0] r_Rx_Byte = 8'h00;
  reg r_Rx_DV = 1'h0;
  reg r_Rx_DV_last = 1'h0;
  reg r_Rx_Data = 1'h1;
  reg r_Rx_Data_R = 1'h1;
  reg [2:0] r_SM_Main = 3'h0;
  assign \$1  = UartClk + 1'h1;
  assign \$2  = ~ r_Rx_DV_last;
  assign \$3  = r_Rx_DV & \$2 ;
  assign \$4  = ! r_Rx_Data;
  assign \$5  = r_Clock_Count == 9'h15a;
  assign \$6  = ! r_Rx_Data;
  assign \$7  = r_Clock_Count + 1'h1;
  assign \$8  = r_Clock_Count < 10'h2b5;
  assign \$9  = r_Clock_Count + 1'h1;
  assign \$10  = r_Bit_Index < 3'h7;
  assign \$11  = r_Bit_Index + 1'h1;
  assign \$12  = r_Clock_Count < 10'h2b5;
  assign \$13  = r_Clock_Count + 1'h1;
  always @(posedge pll80_clk)
    UartClk <= \$14 ;
  always @(posedge pll80_clk)
    o_Rx_DV <= \$15 ;
  always @(posedge pll80_clk)
    r_Rx_DV_last <= \$16 ;
  always @(posedge pll80_clk)
    r_Rx_Data_R <= \$17 ;
  always @(posedge pll80_clk)
    r_Rx_Data <= \$18 ;
  always @(posedge pll80_clk)
    r_Rx_DV <= \$19 ;
  always @(posedge pll80_clk)
    r_Clock_Count <= \$20 ;
  always @(posedge pll80_clk)
    r_Bit_Index <= \$21 ;
  always @(posedge pll80_clk)
    r_SM_Main <= \$22 ;
  always @(posedge pll80_clk)
    r_Rx_Byte <= \$23 ;
  always @(posedge pll80_clk)
    o_Rx_Byte <= \$24 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$19  = r_Rx_DV;
    casez (r_SM_Main)
      3'h0:
          \$19  = 1'h0;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
          end else begin
            \$19  = 1'h1;
          end
      3'h4:
          \$19  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$20  = r_Clock_Count;
    casez (r_SM_Main)
      3'h0:
          \$20  = 16'h0000;
      3'h1:
          (* full_case = 32'd1 *)
          if (\$5 ) begin
            if (\$6 ) begin
              \$20  = 16'h0000;
            end
          end else begin
            \$20  = \$7 [15:0];
          end
      3'h2:
          (* full_case = 32'd1 *)
          if (\$8 ) begin
            \$20  = \$9 [15:0];
          end else begin
            \$20  = 16'h0000;
          end
      3'h3:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
            \$20  = \$13 [15:0];
          end else begin
            \$20  = 16'h0000;
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$21  = r_Bit_Index;
    casez (r_SM_Main)
      3'h0:
          \$21  = 3'h0;
      3'h1:
          /* empty */;
      3'h2:
          (* full_case = 32'd1 *)
          if (\$8 ) begin
          end else begin
            (* full_case = 32'd1 *)
            if (\$10 ) begin
              \$21  = \$11 [2:0];
            end else begin
              \$21  = 3'h0;
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    (* full_case = 32'd1 *)
    casez (r_SM_Main)
      3'h0:
          (* full_case = 32'd1 *)
          if (\$4 ) begin
            \$22  = 3'h1;
          end else begin
            \$22  = 3'h0;
          end
      3'h1:
          (* full_case = 32'd1 *)
          if (\$5 ) begin
            (* full_case = 32'd1 *)
            if (\$6 ) begin
              \$22  = 3'h2;
            end else begin
              \$22  = 3'h0;
            end
          end else begin
            \$22  = 3'h1;
          end
      3'h2:
          (* full_case = 32'd1 *)
          if (\$8 ) begin
            \$22  = 3'h2;
          end else begin
            (* full_case = 32'd1 *)
            if (\$10 ) begin
              \$22  = 3'h2;
            end else begin
              \$22  = 3'h3;
            end
          end
      3'h3:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
            \$22  = 3'h3;
          end else begin
            \$22  = 3'h4;
          end
      3'h4:
          \$22  = 3'h0;
      default:
          \$22  = 3'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$23  = r_Rx_Byte;
    casez (r_SM_Main)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          (* full_case = 32'd1 *)
          if (\$8 ) begin
          end else begin
            (* full_case = 32'd1 *)
            casez (r_Bit_Index)
              3'h0:
                  \$23 [0] = r_Rx_Data;
              3'h1:
                  \$23 [1] = r_Rx_Data;
              3'h2:
                  \$23 [2] = r_Rx_Data;
              3'h3:
                  \$23 [3] = r_Rx_Data;
              3'h4:
                  \$23 [4] = r_Rx_Data;
              3'h5:
                  \$23 [5] = r_Rx_Data;
              3'h6:
                  \$23 [6] = r_Rx_Data;
              3'h7:
                  \$23 [7] = r_Rx_Data;
            endcase
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$9 ) begin end
    \$24  = o_Rx_Byte;
    casez (r_SM_Main)
      3'h0:
          /* empty */;
      3'h1:
          /* empty */;
      3'h2:
          /* empty */;
      3'h3:
          (* full_case = 32'd1 *)
          if (\$12 ) begin
          end else begin
            \$24  = r_Rx_Byte;
          end
    endcase
  end
  assign pll80_rst = 1'h0;
  assign \$18  = r_Rx_Data_R;
  assign \$17  = i_Rx_Serial;
  assign \$16  = r_Rx_DV;
  assign \$15  = \$3 ;
  assign \$14  = \$1 [7:0];
endmodule
